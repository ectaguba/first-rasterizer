{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Canvas from \"./components/Canvas.tsx\";\nimport LineField from \"./components/LineField.tsx\";\nimport { Pixel } from \"./components/Pixel.tsx\";\nimport { Line } from \"./components/Line.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const canvasSize = {\n    x: 640,\n    y: 480\n  };\n  const [lineArr, setLineArr] = useState([new Line(new Pixel(0, 0), new Pixel(0, 0))]);\n  const handleChangeLine = (index, point, axis, value) => {\n    const targetLine = lineArr[index];\n    if (point === 0) {\n      // Update coordinates for point 0\n      if (axis === \"x\") {\n        targetLine.p0.x = value;\n      } else {\n        targetLine.p0.y = value;\n      }\n    } else if (point === 1) {\n      // Update coordinates for point 1\n      if (axis === \"x\") {\n        targetLine.p1.x = value;\n      } else {\n        targetLine.p1.y = value;\n      }\n    }\n    console.log(`Line ${index}: (${item.p0.x}, ${targetLine.p0.y}), (${targetLine.p1.x}, ${item.p1.y})`);\n  };\n  const handleAddLine = () => {\n    // initialize new pixel objects\n    const newLine = new Line(new Pixel(0, 0), new Pixel(0, 0));\n    // initialize new line object and insert into array\n    setLineArr([...lineArr, newLine]);\n  };\n\n  // console.log(\"AFTER ADDING\");\n  // lineArr.map((item, index) => {\n  //     console.log(`Line ${index}: (${item.p0.x}, ${item.p0.y}), (${item.p1.x}, ${item.p1.y})`);\n  // })\n\n  const printLines = () => {\n    console.log(\"PRINTING LINES\");\n    lineArr.map((item, index) => {\n      console.log(`${index}: (${item.p0.x}, ${item.p0.y}), (${item.p1.x}, ${item.p1.y})`);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Rasterizer in the Web\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      lineArr: lineArr,\n      width: canvasSize.x,\n      height: canvasSize.y\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), lineArr.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line-field-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Line \", index]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(LineField, {\n        lineIndex: index,\n        lineObj: item,\n        handleChangeLine: handleChangeLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleAddLine,\n      children: \"Add Line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: printLines,\n      children: \"Print Lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"NParbaXBbHD2+vFSb90nIIKGNjw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Canvas","LineField","Pixel","Line","jsxDEV","_jsxDEV","App","_s","canvasSize","x","y","lineArr","setLineArr","handleChangeLine","index","point","axis","value","targetLine","p0","p1","console","log","item","handleAddLine","newLine","printLines","map","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","width","height","className","lineIndex","lineObj","type","onClick","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Canvas from \"./components/Canvas.tsx\";\nimport LineField from \"./components/LineField.tsx\";\nimport { Pixel } from \"./components/Pixel.tsx\";\nimport { Line } from \"./components/Line.tsx\";\n\nconst App: React.FC = () => {\n\n    const canvasSize = { x: 640, y: 480 };\n\n    const [lineArr, setLineArr] = useState<Line[]>(\n        [new Line(\n            new Pixel(0, 0), \n            new Pixel(0, 0)\n        )]\n    );\n\n    const handleChangeLine = (\n        index: number,\n        point: number,\n        axis: string,\n        value: number\n    ): void => {\n        const targetLine = lineArr[index];\n        if (point === 0) {\n            // Update coordinates for point 0\n            if (axis === \"x\") { \n                targetLine.p0.x = value;\n            } else {\n                targetLine.p0.y = value;\n            }\n        } else if (point === 1) {\n            // Update coordinates for point 1\n            if (axis === \"x\") {\n                targetLine.p1.x = value;\n            } else {\n                targetLine.p1.y = value;\n            }\n        }\n        console.log(`Line ${index}: (${item.p0.x}, ${targetLine.p0.y}), (${targetLine.p1.x}, ${item.p1.y})`)\n    };\n    \n\n    const handleAddLine = (): void => {\n        // initialize new pixel objects\n        const newLine = new Line(new Pixel(0, 0), new Pixel(0, 0));\n        // initialize new line object and insert into array\n        setLineArr([...lineArr, newLine]);\n    }\n\n    // console.log(\"AFTER ADDING\");\n    // lineArr.map((item, index) => {\n    //     console.log(`Line ${index}: (${item.p0.x}, ${item.p0.y}), (${item.p1.x}, ${item.p1.y})`);\n    // })\n\n    const printLines = (): void => {\n        console.log(\"PRINTING LINES\")\n        lineArr.map((item, index) => {\n            console.log(`${index}: (${item.p0.x}, ${item.p0.y}), (${item.p1.x}, ${item.p1.y})`)\n        })\n    }\n\n    return (\n        <div>\n            <h1 style={{ textAlign: \"center\" }}>Rasterizer in the Web</h1>\n            <Canvas\n                lineArr={lineArr}\n                width={canvasSize.x}\n                height={canvasSize.y}\n            />\n            {lineArr.map((item: Line, index: number) => (\n                <div className=\"line-field-div\" key={index}>\n                    <h3>Line {index}</h3>\n                    <LineField\n                        lineIndex={index}\n                        lineObj={item}\n                        handleChangeLine={handleChangeLine}\n                    />\n                </div>\n            ))}\n            <button type=\"button\" onClick={handleAddLine}>\n                Add Line\n            </button>\n            <button onClick={printLines}>Print Lines</button>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}