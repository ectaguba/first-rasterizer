{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  width,\n  height,\n  lineArr\n}) => {\n  _s();\n  // obtain React reference to canvas node\n  const canvasRef = useRef(null);\n\n  // access actual DOM node\n  const canvas = canvasRef.current;\n  if (!canvas) return;\n\n  // rendering context\n  const context = canvas.getContext('2d');\n  if (!context) return;\n\n  /* ImageData is an array containing color data for each pixel.\n  For a given pixel at position i in the buffer:\n      - canvasBuffer.data[i] corresponds to Red\n      - canvasBuffer.data[i + 1] corresponds to Green\n      - canvasBuffer.data[i + 2] corresponds to Blue\n      - canvasBuffer.data[i + 3] corresponds to Alpha */\n  const canvasBuffer = context.getImageData(0, 0, canvas.width, canvas.height);\n  const canvasPitch = canvasBuffer.width * 4;\n\n  // render after state (canvas size, scene objects, etc.) changes\n  useEffect(() => {\n    // Call DrawLine and UpdateCanvas with desired parameters\n    for (let i = 0; i < lineArr.length; i++) {\n      drawLine(lineArr[i].p0, lineArr[i].p1, [0, 0, 0]);\n    }\n    updateCanvas();\n    console.log(\"Updated canvas\");\n  }, [lineArr]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: width,\n      height: height,\n      style: {\n        display: 'block',\n        margin: 'auto',\n        border: '1px grey solid'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Canvas, \"w+GwAnmPg43zn8eCi/IPmMtIL9w=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Canvas","width","height","lineArr","_s","canvasRef","canvas","current","context","getContext","canvasBuffer","getImageData","canvasPitch","i","length","drawLine","p0","p1","updateCanvas","console","log","className","children","ref","style","display","margin","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport { Pixel } from \"./Pixel.tsx\"\nimport { Line } from \"./Line.tsx\"\n\ninterface CanvasProps {\n    width: number;\n    height: number;\n    lineArr: Line[]; \n}\n\nconst Canvas: React.FC<CanvasProps> = ({ width, height, lineArr }) => {\n\n    // obtain React reference to canvas node\n    const canvasRef: React.RefObject<HTMLCanvasElement> = useRef<HTMLCanvasElement>(null);\n\n    // access actual DOM node\n    const canvas: HTMLCanvasElement | null = canvasRef.current;\n    if (!canvas) return;\n\n    // rendering context\n    const context: CanvasRenderingContext2D | null = canvas.getContext('2d');\n    if (!context) return;\n\n    /* ImageData is an array containing color data for each pixel.\n    For a given pixel at position i in the buffer:\n        - canvasBuffer.data[i] corresponds to Red\n        - canvasBuffer.data[i + 1] corresponds to Green\n        - canvasBuffer.data[i + 2] corresponds to Blue\n        - canvasBuffer.data[i + 3] corresponds to Alpha */\n    const canvasBuffer: ImageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    const canvasPitch: number = canvasBuffer.width * 4;\n\n    // render after state (canvas size, scene objects, etc.) changes\n    useEffect(() => {\n        // Call DrawLine and UpdateCanvas with desired parameters\n        for (let i = 0; i < lineArr.length; i++) {\n            drawLine(lineArr[i].p0, lineArr[i].p1, [0, 0, 0]);\n        }\n        updateCanvas();\n        console.log(\"Updated canvas\");\n    }, [lineArr]);\n\n    return (\n        <div className=\"centered\">\n            <canvas\n                ref={canvasRef}\n                width={width}\n                height={height}\n                style={{\n                    display: 'block',\n                    margin: 'auto',\n                    border: '1px grey solid'\n                }}\n            >\n            </canvas>\n        </div>\n    );\n};\n\nexport default Canvas;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWjD,MAAMC,MAA6B,GAAGA,CAAC;EAAEC,KAAK;EAAEC,MAAM;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAElE;EACA,MAAMC,SAA6C,GAAGR,MAAM,CAAoB,IAAI,CAAC;;EAErF;EACA,MAAMS,MAAgC,GAAGD,SAAS,CAACE,OAAO;EAC1D,IAAI,CAACD,MAAM,EAAE;;EAEb;EACA,MAAME,OAAwC,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;EACxE,IAAI,CAACD,OAAO,EAAE;;EAEd;AACJ;AACA;AACA;AACA;AACA;EACI,MAAME,YAAuB,GAAGF,OAAO,CAACG,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEL,MAAM,CAACL,KAAK,EAAEK,MAAM,CAACJ,MAAM,CAAC;EACvF,MAAMU,WAAmB,GAAGF,YAAY,CAACT,KAAK,GAAG,CAAC;;EAElD;EACAL,SAAS,CAAC,MAAM;IACZ;IACA,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,OAAO,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;MACrCE,QAAQ,CAACZ,OAAO,CAACU,CAAC,CAAC,CAACG,EAAE,EAAEb,OAAO,CAACU,CAAC,CAAC,CAACI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACrD;IACAC,YAAY,CAAC,CAAC;IACdC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EACjC,CAAC,EAAE,CAACjB,OAAO,CAAC,CAAC;EAEb,oBACIJ,OAAA;IAAKsB,SAAS,EAAC,UAAU;IAAAC,QAAA,eACrBvB,OAAA;MACIwB,GAAG,EAAElB,SAAU;MACfJ,KAAK,EAAEA,KAAM;MACbC,MAAM,EAAEA,MAAO;MACfsB,KAAK,EAAE;QACHC,OAAO,EAAE,OAAO;QAChBC,MAAM,EAAE,MAAM;QACdC,MAAM,EAAE;MACZ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAAC3B,EAAA,CA/CIJ,MAA6B;AAAAgC,EAAA,GAA7BhC,MAA6B;AAiDnC,eAAeA,MAAM;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}