{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const putPixel = (x, y, color) => {\n      x = canvas.width / 2 + Math.floor(x);\n      y = canvas.height / 2 - Math.floor(y) - 1;\n      if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {\n        return;\n      }\n      const offset = 4 * x + canvas.width * 4 * y;\n      canvasData.data[offset++] = color[0];\n      canvasData.data[offset++] = color[1];\n      canvasData.data[offset++] = color[2];\n      canvasData.data[offset++] = 255; // Alpha = 255 (full opacity)\n    };\n    const drawLineBroken = (x0, y0, x1, y1, color) => {\n      const a = (y1 - y0) / (x1 - x0);\n      let y = y0;\n      for (let x = x0; x <= x1; x++) {\n        putPixel(x, y, color);\n        y += a;\n      }\n    };\n    const canvasData = context.getImageData(0, 0, canvas.width, canvas.height);\n    drawLineBroken(-200, -100, 240, 120, [0, 0, 0]);\n    drawLineBroken(-50, -200, 60, 240, [0, 0, 0]);\n    context.putImageData(canvasData, 0, 0);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 600,\n    height: 600,\n    style: {\n      border: '1px grey solid'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Canvas;\nexport default LineDrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Canvas","_s","canvasRef","current","canvas","context","getContext","putPixel","x","y","color","width","Math","floor","height","offset","canvasData","data","drawLineBroken","x0","y0","x1","y1","a","getImageData","putImageData","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","LineDrawingCanvas","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst Canvas: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    const putPixel = (x: number, y: number, color: number[]) => {\n      x = canvas.width / 2 + Math.floor(x);\n      y = canvas.height / 2 - Math.floor(y) - 1;\n\n      if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {\n        return;\n      }\n\n      const offset = 4 * x + canvas.width * 4 * y;\n      canvasData.data[offset++] = color[0];\n      canvasData.data[offset++] = color[1];\n      canvasData.data[offset++] = color[2];\n      canvasData.data[offset++] = 255; // Alpha = 255 (full opacity)\n    };\n\n    const drawLineBroken = (x0: number, y0: number, x1: number, y1: number, color: number[]) => {\n      const a = (y1 - y0) / (x1 - x0);\n      let y = y0;\n\n      for (let x = x0; x <= x1; x++) {\n        putPixel(x, y, color);\n        y += a;\n      }\n    };\n\n    const canvasData = context.getImageData(0, 0, canvas.width, canvas.height);\n\n    drawLineBroken(-200, -100, 240, 120, [0, 0, 0]);\n    drawLineBroken(-50, -200, 60, 240, [0, 0, 0]);\n\n    context.putImageData(canvasData, 0, 0);\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={600}\n      height={600}\n      style={{ border: '1px grey solid' }}\n    ></canvas>\n  );\n};\n\nexport default LineDrawingCanvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}