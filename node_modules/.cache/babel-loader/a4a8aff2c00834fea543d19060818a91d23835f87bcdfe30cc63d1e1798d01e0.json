{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Pixel } from \"./Pixel.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  width,\n  height,\n  lineArr\n}) => {\n  _s();\n  // obtain React reference to canvas node\n  const canvasRef = useRef(null);\n\n  // render after state (canvas size, scene objects, etc.) changes\n  useEffect(() => {\n    // main drawing method\n    const putPixel = (x, y, color) => {\n      x = canvas.width / 2 + (x | 0);\n      y = canvas.height / 2 - (y | 0) - 1;\n      if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {\n        return;\n      }\n\n      // obtain indices of pixel's color data\n      var offset = 4 * x + canvasPitch * y;\n\n      // iterate through rgba properties\n      canvasBuffer.data[offset++] = color[0];\n      canvasBuffer.data[offset++] = color[1];\n      canvasBuffer.data[offset++] = color[2];\n      canvasBuffer.data[offset++] = 255; // Alpha\n    };\n\n    // switch front buffer and back buffer\n    const updateCanvas = () => {\n      context.putImageData(canvasBuffer, 0, 0);\n    };\n\n    // for each i in domain [i0, i1], obtain values d in range [d0, d1]\n    const interpolate = (i0, d0, i1, d1) => {\n      if (i0 == i1) return [d0]; // single value d = f(i)\n\n      const values = [];\n      const a = (d1 - d0) / (i1 - i0);\n      let d = d0;\n\n      // for each step x/y, increase y/x by slope a\n      for (let i = i0; i <= i1; i++) {\n        values.push(d);\n        d += a;\n      }\n      return values;\n    };\n\n    // drawing lines\n    const drawLine = (p0, p1, color) => {\n      const dx = p1.x - p0.x;\n      const dy = p1.y - p0.y;\n      if (Math.abs(dx) > Math.abs(dy)) {\n        // horizontal-ish line, swap to make line left to right\n        if (p0.x > p1.x) [p0.x, p1.x] = [p1.x, p0.x];\n        // obtain and draw y values at each x\n        const ys = interpolate(p0.x, p0.y, p1.x, p1.y);\n        for (let x = p0.x; x <= p1.x; x++) {\n          putPixel(x, ys[x - p0.x | 0], color);\n        }\n      } else {\n        // vertical-ish line, swap to make line bottom to top\n        if (p0.y > p1.y) [p0.y, p1.y] = [p1.y, p0.y];\n        // obtain and draw x values for each y\n        const xs = interpolate(p0.y, p0.x, p1.y, p1.x);\n        for (let y = p0.y; y <= p1.y; y++) {\n          putPixel(xs[y - p0.y | 0], y, color);\n        }\n      }\n    };\n    const drawWireframeTriangle = (p0, p1, p2, color) => {\n      drawLine(p0, p1, color);\n      drawLine(p1, p2, color);\n      drawLine(p0, p2, color);\n    };\n    const drawFilledTriangle = (p0, p1, p2, color) => {\n      // swap points from lowest to highest\n      if (p1.y < p0.y) [p1, p0] = [p0, p1];\n      if (p2.y < p0.y) [p2, p0] = [p0, p2];\n      if (p2.y < p1.y) [p2, p1] = [p1, p2];\n\n      // for each y, obtain x and h values\n      let x01 = interpolate(p0.y, p0.x, p1.y, p1.x);\n      let h01 = interpolate(p0.y, p0.h, p1.y, p1.h);\n      let x12 = interpolate(p1.y, p1.x, p2.y, p2.x);\n      let h12 = interpolate(p1.y, p1.h, p2.y, p2.h);\n      let x02 = interpolate(p0.y, p0.x, p2.y, p2.x);\n      let h02 = interpolate(p0.y, p0.h, p2.y, p2.h);\n\n      // connect two short sides\n      x01.pop();\n      h01.pop();\n      let x012 = x01.concat(x12);\n      let h012 = h01.concat(h12);\n\n      // use the middle of the triangle to determine left and right sides\n      let m = Math.floor(x012.length / 2);\n      let x_left;\n      let h_left;\n      let x_right;\n      let h_right;\n      if (x02[m] < x012[m]) {\n        x_left = x02;\n        h_left = h02;\n        x_right = x012;\n        h_right = h012;\n      } else {\n        x_left = x012;\n        h_left = h012;\n        x_right = x02;\n        h_right = h02;\n      }\n\n      // iterate from bottom to top\n      for (let yi = p0.y; yi < p2.y; yi++) {\n        // obtain the left and right x-values of the line\n        let x_l = x_left[yi - p0.y];\n        let h_l = h_left[yi - p0.y];\n        let x_r = x_right[yi - p0.y];\n        let h_r = h_right[yi - p0.y];\n\n        // obtain hue values at each x on the line at yi\n        let h_segment = interpolate(x_l, h_l, x_r, h_r);\n\n        // iterate from left to right\n        for (let xi = x_left[yi - p0.y]; xi < x_right[yi - p0.y]; xi++) {\n          let shadedColor = [color[0] * h_segment[xi - x_l], color[1] * h_segment[xi - x_l], color[2] * h_segment[xi - x_l]];\n          putPixel(xi, yi, shadedColor);\n        }\n      }\n    };\n\n    // duplication bug only occurs when i add this??\n    for (let i = 0; i < lineArr.length; i++) {\n      drawLine(lineArr[i].p0, lineArr[i].p1, [0, 0, 0]);\n    }\n\n    // test green triangle\n    let p0 = new Pixel(-200, -200, 0);\n    let p1 = new Pixel(200, 50, 0.5);\n    let p2 = new Pixel(20, 250, 1.0);\n    drawFilledTriangle(p0, p1, p2, [0, 255, 0]);\n    drawWireframeTriangle(p0, p1, p2, [0, 0, 0]);\n  }, [lineArr]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: width,\n      height: height,\n      style: {\n        display: 'block',\n        margin: 'auto',\n        border: '1px grey solid'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this);\n};\n_s(Canvas, \"w+GwAnmPg43zn8eCi/IPmMtIL9w=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","Pixel","jsxDEV","_jsxDEV","Canvas","width","height","lineArr","_s","canvasRef","putPixel","x","y","color","canvas","offset","canvasPitch","canvasBuffer","data","updateCanvas","context","putImageData","interpolate","i0","d0","i1","d1","values","a","d","i","push","drawLine","p0","p1","dx","dy","Math","abs","ys","xs","drawWireframeTriangle","p2","drawFilledTriangle","x01","h01","h","x12","h12","x02","h02","pop","x012","concat","h012","m","floor","length","x_left","h_left","x_right","h_right","yi","x_l","h_l","x_r","h_r","h_segment","xi","shadedColor","className","children","ref","style","display","margin","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport { Pixel } from \"./Pixel.tsx\"\nimport { Line } from \"./Line.tsx\"\n\ninterface CanvasProps {\n    width: number;\n    height: number;\n    lineArr: Line[];\n}\n\nconst Canvas: React.FC<CanvasProps> = ({ width, height, lineArr }) => {\n\n    // obtain React reference to canvas node\n    const canvasRef: React.RefObject<HTMLCanvasElement> = useRef<HTMLCanvasElement>(null);\n\n    // render after state (canvas size, scene objects, etc.) changes\n    useEffect(() => {\n        \n        // main drawing method\n        const putPixel = (x: number, y: number, color: number[]): void => {\n\n            x = canvas.width / 2 + (x | 0);\n            y = canvas.height / 2 - (y | 0) - 1;\n\n            if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {\n                return;\n            }\n\n            // obtain indices of pixel's color data\n            var offset = 4 * x + canvasPitch * y;\n\n            // iterate through rgba properties\n            canvasBuffer.data[offset++] = color[0];\n            canvasBuffer.data[offset++] = color[1];\n            canvasBuffer.data[offset++] = color[2];\n            canvasBuffer.data[offset++] = 255; // Alpha\n\n        };\n\n        // switch front buffer and back buffer\n        const updateCanvas = () => {\n            context.putImageData(canvasBuffer, 0, 0);\n        };\n\n        // for each i in domain [i0, i1], obtain values d in range [d0, d1]\n        const interpolate = (i0: number, d0: number, i1: number, d1: number): number[] => {\n            if (i0 == i1) return [d0]; // single value d = f(i)\n\n            const values: number[] = [];\n            const a: number = (d1 - d0) / (i1 - i0);\n            let d = d0;\n\n            // for each step x/y, increase y/x by slope a\n            for (let i = i0; i <= i1; i++) {\n                values.push(d);\n                d += a;\n            }\n\n            return values;\n        };\n\n        // drawing lines\n        const drawLine = (p0: Pixel, p1: Pixel, color: number[]): void => {\n            const dx: number = p1.x - p0.x;\n            const dy: number = p1.y - p0.y;\n            if (Math.abs(dx) > Math.abs(dy)) { \n                // horizontal-ish line, swap to make line left to right\n                if (p0.x > p1.x) [p0.x, p1.x] = [p1.x, p0.x];\n                // obtain and draw y values at each x\n                const ys: number[] = interpolate(p0.x, p0.y, p1.x, p1.y);\n                for (let x = p0.x; x <= p1.x; x++) {\n                    putPixel(x, ys[x - p0.x | 0], color);\n                }\n            } else { \n                // vertical-ish line, swap to make line bottom to top\n                if (p0.y > p1.y) [p0.y, p1.y] = [p1.y, p0.y];\n                // obtain and draw x values for each y\n                const xs: number[] = interpolate(p0.y, p0.x, p1.y, p1.x);\n                for (let y = p0.y; y <= p1.y; y++) {\n                    putPixel(xs[y - p0.y | 0], y, color);\n                }\n            }\n        };\n\n        const drawWireframeTriangle = (p0: Pixel, p1: Pixel, p2: Pixel, color: number[]): void => {\n            drawLine(p0, p1, color);\n            drawLine(p1, p2, color);\n            drawLine(p0, p2, color);\n        }\n\n        const drawFilledTriangle = (p0: Pixel, p1: Pixel, p2: Pixel, color: number[]): void => {\n\n            // swap points from lowest to highest\n            if (p1.y < p0.y) [p1, p0] = [p0, p1];\n            if (p2.y < p0.y) [p2, p0] = [p0, p2];\n            if (p2.y < p1.y) [p2, p1] = [p1, p2];\n\n            // for each y, obtain x and h values\n            let x01: number[] = interpolate(p0.y, p0.x, p1.y, p1.x); \n            let h01: number[] = interpolate(p0.y, p0.h, p1.y, p1.h);\n\n            let x12: number[] = interpolate(p1.y, p1.x, p2.y, p2.x);\n            let h12: number[] = interpolate(p1.y, p1.h, p2.y, p2.h);\n\n            let x02: number[] = interpolate(p0.y, p0.x, p2.y, p2.x);\n            let h02: number[] = interpolate(p0.y, p0.h, p2.y, p2.h);\n\n            // connect two short sides\n            x01.pop();\n            h01.pop();\n\n            let x012: number[] = x01.concat(x12);\n            let h012: number[] = h01.concat(h12);\n\n            // use the middle of the triangle to determine left and right sides\n            let m: number = Math.floor(x012.length / 2);\n\n            let x_left: number[];\n            let h_left: number[];\n\n            let x_right: number[];\n            let h_right: number[];\n\n            if (x02[m] < x012[m]) {\n                x_left = x02;\n                h_left = h02;\n                \n                x_right = x012;\n                h_right = h012;\n            } else {\n                x_left = x012;\n                h_left = h012;\n\n                x_right = x02;\n                h_right = h02;\n            }\n\n            // iterate from bottom to top\n            for (let yi = p0.y; yi < p2.y; yi++) {\n\n                // obtain the left and right x-values of the line\n                let x_l: number = x_left[yi - p0.y];\n                let h_l: number = h_left[yi - p0.y];\n\n                let x_r: number = x_right[yi - p0.y];\n                let h_r: number = h_right[yi - p0.y];\n                \n                // obtain hue values at each x on the line at yi\n                let h_segment: number[] = interpolate(x_l, h_l, x_r, h_r);\n\n                // iterate from left to right\n                for (let xi = x_left[yi - p0.y]; xi < x_right[yi - p0.y]; xi++) {\n                    let shadedColor: number[] = [\n                        color[0] * h_segment[xi - x_l],\n                        color[1] * h_segment[xi - x_l],\n                        color[2] * h_segment[xi - x_l]\n                    ]\n                    putPixel(xi, yi, shadedColor);\n                }\n            }\n        }\n\n        // duplication bug only occurs when i add this??\n        for (let i = 0; i < lineArr.length; i++) {\n            drawLine(lineArr[i].p0, lineArr[i].p1, [0,0,0]);\n        }\n\n        // test green triangle\n        let p0 = new Pixel(-200, -200, 0);\n        let p1 = new Pixel(200, 50, 0.5);\n        let p2 = new Pixel(20, 250, 1.0);\n\n        drawFilledTriangle(p0, p1, p2, [0, 255, 0]);\n        drawWireframeTriangle(p0, p1, p2, [0, 0, 0]);\n\n    }, [lineArr]);\n\n    return (\n        <div className=\"centered\">\n            <canvas\n                ref={canvasRef}\n                width={width}\n                height={height}\n                style={{\n                    display: 'block',\n                    margin: 'auto',\n                    border: '1px grey solid'\n                }}\n            >\n            </canvas>\n        </div>\n    );\n};\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}