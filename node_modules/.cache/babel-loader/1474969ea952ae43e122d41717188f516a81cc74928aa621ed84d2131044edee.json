{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/react_exercises_for_beginners/src/App11/components/WeatherResults/WeatherResults.jsx\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherResults(props) {\n  const {\n    loading,\n    results\n  } = props;\n  if (loading || !results) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: Object.entries(results)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  }\n}\n_c = WeatherResults;\nexport default WeatherResults;\nvar _c;\n$RefreshReg$(_c, \"WeatherResults\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WeatherResults","props","loading","results","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/react_exercises_for_beginners/src/App11/components/WeatherResults/WeatherResults.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction WeatherResults(props) {\n\n    const { loading, results } = props;\n    \n    if (loading || !results) {\n        return <h2>Loading...</h2>;\n    } else {\n        return (\n            <ul>\n                {/* {Object.keys(results).map((key, index) => (\n                    <li key={index}>\n                        <p>Temperature: {results[key].temperature}</p>\n                        <p>Wind: {results[key].wind}</p>\n                        <p>Description: {results[key].description}</p>\n                        <ul>\n                            {results[key].forecast.map((forecastItem, forecastIndex) => (\n                                <li key={forecastIndex}>\n                                    <p>Day {forecastItem.day}</p>\n                                    <p>Temperature: {forecastItem.temperature}</p>\n                                    <p>Wind: {forecastItem.wind}</p>\n                                </li>\n                            ))}\n                        </ul>\n                    </li>\n                ))} */}\n                {\n                }\n                <p>{Object.entries(results)}</p>\n            </ul>\n        );\n    }\n}\n\nexport default WeatherResults;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,cAAcA,CAACC,KAAK,EAAE;EAE3B,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGF,KAAK;EAElC,IAAIC,OAAO,IAAI,CAACC,OAAO,EAAE;IACrB,oBAAOJ,OAAA;MAAAK,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9B,CAAC,MAAM;IACH,oBACIT,OAAA;MAAAK,QAAA,eAmBIL,OAAA;QAAAK,QAAA,EAAIK,MAAM,CAACC,OAAO,CAACP,OAAO;MAAC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAEb;AACJ;AAACG,EAAA,GA/BQX,cAAc;AAiCvB,eAAeA,cAAc;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}