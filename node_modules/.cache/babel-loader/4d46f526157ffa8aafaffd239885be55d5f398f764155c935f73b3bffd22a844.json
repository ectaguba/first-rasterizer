{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Canvas from \"./components/Canvas.tsx\";\nimport LineField from \"./components/LineField.tsx\";\nimport { Pixel } from \"./components/Pixel.tsx\";\nimport { Line } from \"./components/Line.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const canvasSize = {\n    x: 640,\n    y: 480\n  };\n  const [lineArr, setLineArr] = useState([new Line(new Pixel(0, 0), new Pixel(0, 0))]);\n\n  // const handleChangeLine = (\n  //     index: number,\n  //     point: number,\n  //     axis: string,\n  //     value: number\n  // ): void => {\n  //     setLineArr((prevLineArr) => {\n  //         const updatedLines: Line[] = [...prevLineArr];\n  //         const targetLine: Line = new Line(\n  //             new Pixel(updatedLines[index].p0.x, updatedLines[index].p0.y),\n  //             new Pixel(updatedLines[index].p1.x, updatedLines[index].p1.y)\n  //         );\n  //         // Update the appropriate coordinate based on point and axis\n  //         if (point === 0) {\n  //             targetLine.p0 = new Pixel(\n  //                 axis === \"x\" ? value : targetLine.p0.x,\n  //                 axis === \"y\" ? value : targetLine.p0.y\n  //             );\n  //         } else {\n  //             targetLine.p1 = new Pixel(\n  //                 axis === \"x\" ? value : targetLine.p1.x,\n  //                 axis === \"y\" ? value : targetLine.p1.y\n  //             );\n  //         }\n  //         updatedLines[index] = targetLine;\n  //         return updatedLines;\n  //     })\n  // };\n\n  const handleChangeLine = (index, point, axis, value) => {\n    setLineArr(prevLineArr => {\n      const updatedLines = prevLineArr.map((line, i) => i === index ? line.updatePoint(point, axis, value) : line);\n      return updatedLines;\n    });\n    setLineArr(prevLineArr => {\n      const updatedLines = prevLineArr.map((line, i) => {});\n    });\n  };\n  const handleAddLine = () => {\n    // initialize new pixel objects\n    const newLine = new Line(new Pixel(0, 0), new Pixel(0, 0));\n    // initialize new line object and insert into array\n    setLineArr([...lineArr, newLine]);\n  };\n  const printLines = () => {\n    console.log(\"printLines:\");\n    lineArr.map((item, index) => {\n      console.log(`${index}: (${item.p0.x}, ${item.p0.y}), (${item.p1.x}, ${item.p1.y})`);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Rasterizer in the Web\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      lineArr: lineArr,\n      width: canvasSize.x,\n      height: canvasSize.y\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), lineArr.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line-field-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Line \", index]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(LineField, {\n        lineIndex: index,\n        lineObj: item,\n        handleChangeLine: handleChangeLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleAddLine,\n      children: \"Add Line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: printLines,\n      children: \"Print Lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"xbGb4t5QuHgXVs3ETjsoKFmpCJc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Canvas","LineField","Pixel","Line","jsxDEV","_jsxDEV","App","_s","canvasSize","x","y","lineArr","setLineArr","handleChangeLine","index","point","axis","value","prevLineArr","updatedLines","map","line","i","updatePoint","handleAddLine","newLine","printLines","console","log","item","p0","p1","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","width","height","className","lineIndex","lineObj","type","onClick","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Canvas from \"./components/Canvas.tsx\";\nimport LineField from \"./components/LineField.tsx\";\nimport { Pixel } from \"./components/Pixel.tsx\";\nimport { Line } from \"./components/Line.tsx\";\n\nconst App: React.FC = () => {\n\n    const canvasSize = { x: 640, y: 480 };\n\n    const [lineArr, setLineArr] = useState<Line[]>(\n        [new Line(\n            new Pixel(0, 0),\n            new Pixel(0, 0)\n        )]\n    );\n\n    // const handleChangeLine = (\n    //     index: number,\n    //     point: number,\n    //     axis: string,\n    //     value: number\n    // ): void => {\n    //     setLineArr((prevLineArr) => {\n    //         const updatedLines: Line[] = [...prevLineArr];\n    //         const targetLine: Line = new Line(\n    //             new Pixel(updatedLines[index].p0.x, updatedLines[index].p0.y),\n    //             new Pixel(updatedLines[index].p1.x, updatedLines[index].p1.y)\n    //         );\n    //         // Update the appropriate coordinate based on point and axis\n    //         if (point === 0) {\n    //             targetLine.p0 = new Pixel(\n    //                 axis === \"x\" ? value : targetLine.p0.x,\n    //                 axis === \"y\" ? value : targetLine.p0.y\n    //             );\n    //         } else {\n    //             targetLine.p1 = new Pixel(\n    //                 axis === \"x\" ? value : targetLine.p1.x,\n    //                 axis === \"y\" ? value : targetLine.p1.y\n    //             );\n    //         }\n    //         updatedLines[index] = targetLine;\n    //         return updatedLines;\n    //     })\n    // };\n\n    const handleChangeLine = (index: number, point: number, axis: string, value: number): void => {\n        setLineArr((prevLineArr) => {\n            const updatedLines = prevLineArr.map((line, i) => (i === index ? line.updatePoint(point, axis, value) : line));\n            return updatedLines;\n        });\n        setLineArr((prevLineArr) => {\n            const updatedLines = prevLineArr.map((line, i) => {\n                \n            })\n        })\n    };\n\n    const handleAddLine = (): void => {\n        // initialize new pixel objects\n        const newLine = new Line(new Pixel(0, 0), new Pixel(0, 0));\n        // initialize new line object and insert into array\n        setLineArr([...lineArr, newLine]);\n    }\n\n    const printLines = (): void => {\n        console.log(\"printLines:\")\n        lineArr.map((item, index) => {\n            console.log(`${index}: (${item.p0.x}, ${item.p0.y}), (${item.p1.x}, ${item.p1.y})`)\n        })\n    }\n\n    return (\n        <div>\n            <h1 style={{ textAlign: \"center\" }}>Rasterizer in the Web</h1>\n            <Canvas\n                lineArr={lineArr}\n                width={canvasSize.x}\n                height={canvasSize.y}\n            />\n            {lineArr.map((item: Line, index: number) => (\n                <div className=\"line-field-div\" key={index}>\n                    <h3>Line {index}</h3>\n                    <LineField\n                        lineIndex={index}\n                        lineObj={item}\n                        handleChangeLine={handleChangeLine}\n                    />\n                </div>\n            ))}\n            <button type=\"button\" onClick={handleAddLine}>\n                Add Line\n            </button>\n            <button onClick={printLines}>Print Lines</button>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}