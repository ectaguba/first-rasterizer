{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  width,\n  height\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      if (!context) return; // prevents null error in canvasBuffer\n\n      const canvasBuffer = context.getImageData(0, 0, canvas.width, canvas.height);\n      const canvasPitch = canvasBuffer.width * 4;\n      const putPixel = (x, y, color) => {\n        // Implement PutPixel function\n        // ...\n      };\n      const updateCanvas = () => {\n        // Implement UpdateCanvas function\n        // ...\n      };\n      const interpolate = (i0, d0, i1, d1) => {\n        // Implement Interpolate function\n        // ...\n      };\n      const drawLine = (p0, p1, color) => {\n        // Implement DrawLine function\n        // ...\n      };\n\n      // Call DrawLine and UpdateCanvas with your desired parameters\n      drawLine({\n        x: -200,\n        y: -100\n      }, {\n        x: 240,\n        y: 120\n      }, [0, 0, 0]);\n      drawLine({\n        x: -50,\n        y: -200\n      }, {\n        x: 60,\n        y: 240\n      }, [0, 0, 0]);\n      updateCanvas();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: width,\n      height: height,\n      style: {\n        border: '1px grey solid'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Canvas","width","height","_s","canvasRef","current","canvas","context","getContext","canvasBuffer","getImageData","canvasPitch","putPixel","x","y","color","updateCanvas","interpolate","i0","d0","i1","d1","drawLine","p0","p1","className","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\ninterface CanvasProps {\n    width: number;\n    height: number;\n}\n\nconst Canvas: React.FC<CanvasProps> = ({width, height}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n\n      if (!context) return; // prevents null error in canvasBuffer\n\n      const canvasBuffer = context.getImageData(0, 0, canvas.width, canvas.height);\n      const canvasPitch = canvasBuffer.width * 4;\n\n      const putPixel = (x: number, y: number, color: number[]) => {\n        // Implement PutPixel function\n        // ...\n\n      };\n\n      const updateCanvas = () => {\n        // Implement UpdateCanvas function\n        // ...\n\n      };\n\n      const interpolate = (i0: number, d0: number, i1: number, d1: number) => {\n        // Implement Interpolate function\n        // ...\n\n      };\n\n      const drawLine = (p0: { x: number; y: number }, p1: { x: number; y: number }, color: number[]) => {\n        // Implement DrawLine function\n        // ...\n\n      };\n\n      // Call DrawLine and UpdateCanvas with your desired parameters\n      drawLine({ x: -200, y: -100 }, { x: 240, y: 120 }, [0, 0, 0]);\n      drawLine({ x: -50, y: -200 }, { x: 60, y: 240 }, [0, 0, 0]);\n\n      updateCanvas();\n    }\n  }, []);\n\n  return (\n    <div className=\"centered\">\n      <canvas \n        ref={canvasRef} \n        width={width} height={height} style={{ border: '1px grey solid' }}\n      >\n\n      </canvas>\n    </div>\n  );\n};\n\nexport default Canvas;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOjD,MAAMC,MAA6B,GAAGA,CAAC;EAACC,KAAK;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAMC,SAAS,GAAGP,MAAM,CAAoB,IAAI,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,CAACC,OAAO,EAAE;MACrB,MAAMC,MAAM,GAAGF,SAAS,CAACC,OAAO;MAChC,MAAME,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;MAEvC,IAAI,CAACD,OAAO,EAAE,OAAO,CAAC;;MAEtB,MAAME,YAAY,GAAGF,OAAO,CAACG,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEJ,MAAM,CAACL,KAAK,EAAEK,MAAM,CAACJ,MAAM,CAAC;MAC5E,MAAMS,WAAW,GAAGF,YAAY,CAACR,KAAK,GAAG,CAAC;MAE1C,MAAMW,QAAQ,GAAGA,CAACC,CAAS,EAAEC,CAAS,EAAEC,KAAe,KAAK;QAC1D;QACA;MAAA,CAED;MAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;QACzB;QACA;MAAA,CAED;MAED,MAAMC,WAAW,GAAGA,CAACC,EAAU,EAAEC,EAAU,EAAEC,EAAU,EAAEC,EAAU,KAAK;QACtE;QACA;MAAA,CAED;MAED,MAAMC,QAAQ,GAAGA,CAACC,EAA4B,EAAEC,EAA4B,EAAET,KAAe,KAAK;QAChG;QACA;MAAA,CAED;;MAED;MACAO,QAAQ,CAAC;QAAET,CAAC,EAAE,CAAC,GAAG;QAAEC,CAAC,EAAE,CAAC;MAAI,CAAC,EAAE;QAAED,CAAC,EAAE,GAAG;QAAEC,CAAC,EAAE;MAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAC7DQ,QAAQ,CAAC;QAAET,CAAC,EAAE,CAAC,EAAE;QAAEC,CAAC,EAAE,CAAC;MAAI,CAAC,EAAE;QAAED,CAAC,EAAE,EAAE;QAAEC,CAAC,EAAE;MAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAE3DE,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA;IAAK0B,SAAS,EAAC,UAAU;IAAAC,QAAA,eACvB3B,OAAA;MACE4B,GAAG,EAAEvB,SAAU;MACfH,KAAK,EAAEA,KAAM;MAACC,MAAM,EAAEA,MAAO;MAAC0B,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAiB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAG5D;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAvDIH,MAA6B;AAAAkC,EAAA,GAA7BlC,MAA6B;AAyDnC,eAAeA,MAAM;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}