{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/react_exercises_for_beginners/src/App11/App11.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Hero from \"./components/Hero/Hero.jsx\";\nimport SearchForm from \"./components/SearchForm/SearchForm.jsx\";\nimport WeatherResults from \"./components/WeatherResults/WeatherResults.jsx\";\nimport ErrorMessage from \"./components/ErrorMessage/ErrorMessage.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App11() {\n  _s();\n  const getUserCity = () => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        try {\n          const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);\n          if (response.ok) {\n            const data = await response.json();\n            const city = data.address.city; // Access the city name from the response\n            console.log(\"User's city:\", city);\n            return city;\n          } else {\n            throw new Error('Failed to fetch city data');\n          }\n        } catch (error) {\n          console.error(\"Error:\", error);\n        }\n      }, error => {\n        console.error(\"Error getting geolocation:\", error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported in this browser\");\n    }\n  };\n  const defaultCity = \"New York\";\n  const userCity = getUserCity() || defaultCity;\n  const [currCity, setCurrCity] = useState(userCity);\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getWeatherForecasts(currCity);\n  }, []);\n  const getWeatherForecasts = async city => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`https://goweather.herokuapp.com/weather/${encodeURIComponent(city)}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const data = await response.json(); // returns object\n      setCurrCity(city);\n      setResults(data);\n    } catch {\n      setError(`Failed to fetch forecast data for ${city}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      getWeatherForecasts: getWeatherForecasts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherResults, {\n      currCity: currCity,\n      loading: loading,\n      results: results,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App11, \"/GgEoI6cWux2DPtjFPCdTHXKiSM=\");\n_c = App11;\nexport default App11;\nvar _c;\n$RefreshReg$(_c, \"App11\");","map":{"version":3,"names":["React","useState","useEffect","Hero","SearchForm","WeatherResults","ErrorMessage","jsxDEV","_jsxDEV","App11","_s","getUserCity","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","response","fetch","ok","data","json","city","address","console","log","Error","error","defaultCity","userCity","currCity","setCurrCity","results","setResults","loading","setLoading","setError","getWeatherForecasts","encodeURIComponent","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/react_exercises_for_beginners/src/App11/App11.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Hero from \"./components/Hero/Hero.jsx\";\nimport SearchForm from \"./components/SearchForm/SearchForm.jsx\";\nimport WeatherResults from \"./components/WeatherResults/WeatherResults.jsx\";\nimport ErrorMessage from \"./components/ErrorMessage/ErrorMessage.jsx\";\n\nfunction App11() {\n\n  const getUserCity = () => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n\n          try {\n            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);\n            if (response.ok) {\n              const data = await response.json();\n              const city = data.address.city; // Access the city name from the response\n              console.log(\"User's city:\", city);\n              return city;\n            } else {\n              throw new Error('Failed to fetch city data');\n            }\n          } catch (error) {\n            console.error(\"Error:\", error);\n          }\n        },\n        (error) => {\n          console.error(\"Error getting geolocation:\", error);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported in this browser\");\n    }\n  }\n\n  const defaultCity = \"New York\"\n  const userCity = getUserCity() || defaultCity;\n\n  const [currCity, setCurrCity] = useState(userCity);\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n\n  useEffect(() => {\n    getWeatherForecasts(currCity);\n  }, [])\n\n  const getWeatherForecasts = async (city) => {\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`https://goweather.herokuapp.com/weather/${encodeURIComponent(city)}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const data = await response.json(); // returns object\n      setCurrCity(city);\n      setResults(data);\n    } catch {\n      setError(`Failed to fetch forecast data for ${city}`);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div>\n      <Hero />\n      <SearchForm\n        getWeatherForecasts={getWeatherForecasts}\n      />\n      <WeatherResults\n        currCity={currCity}\n        loading={loading}\n        results={results}\n        error={error}\n      />\n      <ErrorMessage\n        error={error}\n      />\n    </div>\n  );\n}\n\nexport default App11;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}