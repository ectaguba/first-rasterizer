{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  width,\n  height\n}) => {\n  // // Generate canvas grid of Pixel components\n  // const generateCanvas = (): JSX.Element[] => {\n  //     const pixels: JSX.Element[] = [];\n  //     for (let x = 0; x < width; x++) {\n  //         for (let y = 0; y < height; y++) {\n  //             let pixelColor = ((x+y) % 2) ? \"black\" : \"white\"\n  //             pixels.push(    \n  //                 <Pixel \n  //                     key={`${x}-${y}`} \n  //                     x={x} \n  //                     y={y} \n  //                     color={pixelColor} \n  //                     size={pixelSize} \n  //                 />\n  //             );\n  //         }\n  //     }\n  //     return pixels;\n  // };\n\n  // const putPixel(x: number, y: number, color: string, size: number): void = () => {\n  //     // for actually drawing in the pixel\n  // }\n\n  // const interpolate = (i0: number, d0: number, i1: number, d1: number): number[] => {\n  //     if (i0 == i1) {\n  //         return [d0];\n  //     }\n\n  //     let values[] = [];\n  //     const a = (d1 - d0) / (i1 - i0);\n  //     let d = d0;\n\n  //     for (let i = i0; i < i1; i++) {\n  //         values.push(d);\n  //         d += a;\n  //     }\n\n  //     return values;\n  // }\n\n  // const drawLine = (p0: Pixel, p1: Pixel, color: string): void => {\n  //     // for calculating slope\n  //     const dx = p1.x - p0.x;\n  //     const dy = p1.y - p0.y;\n  //     if (Math.abs(p1.x - p0.x) > Math.abs(p1.y - p0.y)) {\n  //         // line is horizontal-ish\n  //         if (p0.x > p1.x) {\n  //             [p0, p1] = [p1, p0]\n  //         }\n  //         let ys: number[] = interpolate(p0.x, p0.y, p1.x, p1.y);\n  //         for (let x = p0.x; x < p1.x; x++) {\n  //             canvas.putPixel(x, ys[x - p0.x], color);\n  //         }\n  //     } else {\n  //         // line is vertical-ish\n  //         if (p0.y > p1.y) {\n  //             [p0, p1] = [p1, p0]\n  //         }\n  //         let xs: number[] = interpolate(p0.y, p0.x, p1.y, p1.x);\n  //         for (let y = p0.y; y < p1.y; y++) {\n  //             canvas.putPixel(xs[y - p0.y], y, color);\n  //         }\n  //     }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"Canvas\",\n    width: `${width}px`,\n    height: `${height}px`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Canvas","width","height","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface CanvasProps {\n    width: number;\n    height: number;\n}\n\nconst Canvas: React.FC<CanvasProps> = ({ width, height }) => {\n    // // Generate canvas grid of Pixel components\n    // const generateCanvas = (): JSX.Element[] => {\n    //     const pixels: JSX.Element[] = [];\n    //     for (let x = 0; x < width; x++) {\n    //         for (let y = 0; y < height; y++) {\n    //             let pixelColor = ((x+y) % 2) ? \"black\" : \"white\"\n    //             pixels.push(    \n    //                 <Pixel \n    //                     key={`${x}-${y}`} \n    //                     x={x} \n    //                     y={y} \n    //                     color={pixelColor} \n    //                     size={pixelSize} \n    //                 />\n    //             );\n    //         }\n    //     }\n    //     return pixels;\n    // };\n\n    // const putPixel(x: number, y: number, color: string, size: number): void = () => {\n    //     // for actually drawing in the pixel\n    // }\n\n    // const interpolate = (i0: number, d0: number, i1: number, d1: number): number[] => {\n    //     if (i0 == i1) {\n    //         return [d0];\n    //     }\n\n    //     let values[] = [];\n    //     const a = (d1 - d0) / (i1 - i0);\n    //     let d = d0;\n\n    //     for (let i = i0; i < i1; i++) {\n    //         values.push(d);\n    //         d += a;\n    //     }\n\n    //     return values;\n    // }\n\n    // const drawLine = (p0: Pixel, p1: Pixel, color: string): void => {\n    //     // for calculating slope\n    //     const dx = p1.x - p0.x;\n    //     const dy = p1.y - p0.y;\n    //     if (Math.abs(p1.x - p0.x) > Math.abs(p1.y - p0.y)) {\n    //         // line is horizontal-ish\n    //         if (p0.x > p1.x) {\n    //             [p0, p1] = [p1, p0]\n    //         }\n    //         let ys: number[] = interpolate(p0.x, p0.y, p1.x, p1.y);\n    //         for (let x = p0.x; x < p1.x; x++) {\n    //             canvas.putPixel(x, ys[x - p0.x], color);\n    //         }\n    //     } else {\n    //         // line is vertical-ish\n    //         if (p0.y > p1.y) {\n    //             [p0, p1] = [p1, p0]\n    //         }\n    //         let xs: number[] = interpolate(p0.y, p0.x, p1.y, p1.x);\n    //         for (let y = p0.y; y < p1.y; y++) {\n    //             canvas.putPixel(xs[y - p0.y], y, color);\n    //         }\n    //     }\n    // }\n\n    return (\n        <canvas \n            id=\"Canvas\" \n            width={`${width}px`} \n            height={`${height}px`}\n        >\n        </canvas>\n    );\n}\n\nexport default Canvas;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO1B,MAAMC,MAA6B,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAO,CAAC,KAAK;EACzD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIH,OAAA;IACII,EAAE,EAAC,QAAQ;IACXF,KAAK,EAAG,GAAEA,KAAM,IAAI;IACpBC,MAAM,EAAG,GAAEA,MAAO;EAAI;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAElB,CAAC;AAEjB,CAAC;AAAAC,EAAA,GA3EKR,MAA6B;AA6EnC,eAAeA,MAAM;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}