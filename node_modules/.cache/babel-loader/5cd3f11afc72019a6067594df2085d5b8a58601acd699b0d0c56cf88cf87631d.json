{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  width,\n  height,\n  lineArr\n}) => {\n  _s();\n  // obtain React reference to canvas node\n  const canvasRef = useRef(null);\n\n  // render after state (canvas size, scene objects, etc.) changes\n  useEffect(() => {\n    // access actual DOM node\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    // rendering context\n    const context = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    if (!context) return;\n\n    // clear canvas\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    /* ImageData is an array containing color data for each pixel.\n    For a given pixel at position i in the buffer:\n        - canvasBuffer.data[i] corresponds to Red\n        - canvasBuffer.data[i + 1] corresponds to Green\n        - canvasBuffer.data[i + 2] corresponds to Blue\n        - canvasBuffer.data[i + 3] corresponds to Alpha */\n    const canvasBuffer = context.getImageData(0, 0, canvas.width, canvas.height);\n    const canvasPitch = canvasBuffer.width * 4;\n    const putPixel = (x, y, color) => {\n      x = canvas.width / 2 + (x | 0);\n      y = canvas.height / 2 - (y | 0) - 1;\n      if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {\n        return;\n      }\n\n      // obtain indices of pixel's color data\n      var offset = 4 * x + canvasPitch * y;\n\n      // iterate through rgba properties\n      canvasBuffer.data[offset++] = color[0];\n      canvasBuffer.data[offset++] = color[1];\n      canvasBuffer.data[offset++] = color[2];\n      canvasBuffer.data[offset++] = 255; // Alpha\n    };\n    const updateCanvas = () => {\n      context.putImageData(canvasBuffer, 0, 0);\n    };\n\n    // domain: [i0, i1]\n    // range: [d0, d1]\n    const interpolate = (i0, d0, i1, d1) => {\n      // single value d = f(i)\n      if (i0 == i1) return [d0];\n      const values = [];\n      const a = (d1 - d0) / (i1 - i0);\n      let d = d0;\n\n      // for each step x/y, increase y/x by slope a\n      for (let i = i0; i < i1; i++) {\n        values.push(d);\n        d += a;\n      }\n      return values;\n    };\n    const drawLine = (p0, p1, color) => {\n      const dx = p1.x - p0.x;\n      const dy = p1.y - p0.y;\n      if (Math.abs(dx) > Math.abs(dy)) {\n        // line is more horizontal\n        if (p0.x > p1.x) {\n          [p0.x, p1.x] = [p1.x, p0.x]; // swap\n        }\n        const ys = interpolate(p0.x, p0.y, p1.x, p1.y);\n        for (let x = p0.x; x < p1.x; x++) {\n          putPixel(x, ys[x - p0.x], color);\n        }\n      } else {\n        // line is more vertical\n        if (p0.y > p1.y) {\n          [p0.y, p1.y] = [p1.y, p0.y];\n        }\n        const xs = interpolate(p0.y, p0.x, p1.y, p1.x);\n        for (let y = p0.y; y < p1.y; y++) {\n          putPixel(y, xs[y - p0.y], color);\n        }\n      }\n    };\n    const DrawFilledTriangle = (p0, p1, p2, color) => {\n      if (p1.y < p0.y) [p1, p0] = [p0, p1];\n      if (p2.y < p0.y) [p2, p0] = [p0, p2];\n      if (p2.y < p1.y) [p2, p1] = [p1, p2];\n      const x01 = interpolate(p0.y, p0.x, p1.y, p1.x);\n      const x12 = interpolate(p1.y, p1.x, p2.y, p2.x);\n    };\n\n    // Call DrawLine and UpdateCanvas with desired parameters\n    for (let i = 0; i < lineArr.length; i++) {\n      drawLine(lineArr[i].p0, lineArr[i].p1, [0, 0, 0]);\n      // console.log(`Line Drawn ${i}: (${lineArr[i].p0.x}, ${lineArr[i].p0.y}), (${lineArr[i].p1.x}, ${lineArr[i].p1.y})`);\n    }\n    updateCanvas();\n  }, [lineArr]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: width,\n      height: height,\n      style: {\n        display: 'block',\n        margin: 'auto',\n        border: '1px grey solid'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(Canvas, \"w+GwAnmPg43zn8eCi/IPmMtIL9w=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Canvas","width","height","lineArr","_s","canvasRef","canvas","current","context","getContext","willReadFrequently","clearRect","canvasBuffer","getImageData","canvasPitch","putPixel","x","y","color","offset","data","updateCanvas","putImageData","interpolate","i0","d0","i1","d1","values","a","d","i","push","drawLine","p0","p1","dx","dy","Math","abs","ys","xs","DrawFilledTriangle","p2","x01","x12","length","className","children","ref","style","display","margin","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport { Pixel } from \"./Pixel.tsx\"\nimport { Line } from \"./Line.tsx\"\n\ninterface CanvasProps {\n    width: number;\n    height: number;\n    lineArr: Line[];\n}\n\nconst Canvas: React.FC<CanvasProps> = ({ width, height, lineArr }) => {\n\n    // obtain React reference to canvas node\n    const canvasRef: React.RefObject<HTMLCanvasElement> = useRef<HTMLCanvasElement>(null);\n\n    // render after state (canvas size, scene objects, etc.) changes\n    useEffect(() => {\n        // access actual DOM node\n        const canvas: HTMLCanvasElement | null = canvasRef.current;\n        if (!canvas) return;\n\n        // rendering context\n        const context: CanvasRenderingContext2D | null = canvas.getContext('2d', { willReadFrequently: true });\n        if (!context) return;\n\n        // clear canvas\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        /* ImageData is an array containing color data for each pixel.\n        For a given pixel at position i in the buffer:\n            - canvasBuffer.data[i] corresponds to Red\n            - canvasBuffer.data[i + 1] corresponds to Green\n            - canvasBuffer.data[i + 2] corresponds to Blue\n            - canvasBuffer.data[i + 3] corresponds to Alpha */\n        const canvasBuffer: ImageData = context.getImageData(0, 0, canvas.width, canvas.height);\n        const canvasPitch: number = canvasBuffer.width * 4;\n        const putPixel = (x: number, y: number, color: number[]): void => {\n\n            x = canvas.width / 2 + (x | 0);\n            y = canvas.height / 2 - (y | 0) - 1;\n\n            if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {\n                return;\n            }\n\n            // obtain indices of pixel's color data\n            var offset = 4 * x + canvasPitch * y;\n\n            // iterate through rgba properties\n            canvasBuffer.data[offset++] = color[0];\n            canvasBuffer.data[offset++] = color[1];\n            canvasBuffer.data[offset++] = color[2];\n            canvasBuffer.data[offset++] = 255; // Alpha\n\n        };\n\n        const updateCanvas = () => {\n            context.putImageData(canvasBuffer, 0, 0);\n        };\n\n        // domain: [i0, i1]\n        // range: [d0, d1]\n        const interpolate = (i0: number, d0: number, i1: number, d1: number): number[] => {\n\n            // single value d = f(i)\n            if (i0 == i1) return [d0];\n\n            const values: number[] = [];\n            const a: number = (d1 - d0) / (i1 - i0);\n            let d = d0;\n\n            // for each step x/y, increase y/x by slope a\n            for (let i = i0; i < i1; i++) {\n                values.push(d);\n                d += a;\n            }\n\n            return values;\n\n        };\n\n        const drawLine = (p0: Pixel, p1: Pixel, color: number[]): void => {\n\n            const dx: number = p1.x - p0.x;\n            const dy: number = p1.y - p0.y;\n\n            if (Math.abs(dx) > Math.abs(dy)) {\n                // line is more horizontal\n                if (p0.x > p1.x) {\n                    [p0.x, p1.x] = [p1.x, p0.x]; // swap\n                }\n                const ys: number[] = interpolate(p0.x, p0.y, p1.x, p1.y);\n                for (let x = p0.x; x < p1.x; x++) {\n                    putPixel(x, ys[x - p0.x], color);\n                }\n            } else {\n                // line is more vertical\n                if (p0.y > p1.y) {\n                    [p0.y, p1.y] = [p1.y, p0.y];\n                }\n                const xs: number[] = interpolate(p0.y, p0.x, p1.y, p1.x);\n                for (let y = p0.y; y < p1.y; y++) {\n                    putPixel(y, xs[y - p0.y], color);\n                }\n            }\n        };\n\n        const DrawFilledTriangle = (p0: Pixel, p1: Pixel, p2: Pixel, color: string): void => {\n            if (p1.y < p0.y) [p1, p0] = [p0, p1];\n            if (p2.y < p0.y) [p2, p0] = [p0, p2];\n            if (p2.y < p1.y) [p2, p1] = [p1, p2];\n            const x01: number[] = interpolate(p0.y, p0.x, p1.y, p1.x);\n            const x12: number[] = interpolate(p1.y, p1.x, p2.y, p2.x);\n\n        }\n\n        // Call DrawLine and UpdateCanvas with desired parameters\n        for (let i = 0; i < lineArr.length; i++) {\n            drawLine(lineArr[i].p0, lineArr[i].p1, [0, 0, 0]);\n            // console.log(`Line Drawn ${i}: (${lineArr[i].p0.x}, ${lineArr[i].p0.y}), (${lineArr[i].p1.x}, ${lineArr[i].p1.y})`);\n        }\n        updateCanvas();\n    }, [lineArr]);\n\n    return (\n        <div className=\"centered\">\n            <canvas\n                ref={canvasRef}\n                width={width}\n                height={height}\n                style={{\n                    display: 'block',\n                    margin: 'auto',\n                    border: '1px grey solid'\n                }}\n            >\n            </canvas>\n        </div>\n    );\n};\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}