{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Canvas from \"./components/Canvas.tsx\";\nimport LineField from \"./components/LineField.tsx\";\nimport { Pixel } from \"./components/Pixel.tsx\";\nimport { Line } from \"./components/Line.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const canvasSize = {\n    x: 640,\n    y: 480\n  };\n  const [lineArr, setLineArr] = useState([new Line(new Pixel(0, 0), new Pixel(0, 0))]);\n\n  // buggy??\n  // const handleChangeLine = (\n  //     index: number,\n  //     point: number,\n  //     axis: string,\n  //     value: number\n  // ): void => {\n  //     setLineArr((prevLineArr) => {\n  //         const updatedLines = [...prevLineArr];\n  //         const targetLine = updatedLines[index];\n\n  //         if (point === 0) {\n  //             // Update coordinates for point 0\n  //             if (axis === \"x\") {\n  //                 targetLine.p0.x = value;\n  //             } else {\n  //                 targetLine.p0.y = value;\n  //             }\n  //         } else {\n  //             // Update coordinates for point 1\n  //             if (axis === \"x\") {\n  //                 targetLine.p1.x = value;\n  //             } else {\n  //                 targetLine.p1.y = value;\n  //             }\n  //         }\n\n  //         return updatedLines;\n  //     });\n  // };\n\n  const handleChangeLine = (index, point, axis, value) => {\n    setLineArr(prevLineArr => {\n      console.log(prevLineArr);\n      const updatedLines = [...prevLineArr];\n      const targetLine = new Line(new Pixel(updatedLines[index].p0.x, updatedLines[index].p0.y), new Pixel(updatedLines[index].p1.x, updatedLines[index].p1.y));\n      // Update the appropriate coordinate based on point and axis\n      if (point === 0) {\n        targetLine.p0 = new Pixel(axis === \"x\" ? value : targetLine.p0.x, axis === \"y\" ? value : targetLine.p0.y);\n      } else {\n        targetLine.p1 = new Pixel(axis === \"x\" ? value : targetLine.p1.x, axis === \"y\" ? value : targetLine.p1.y);\n      }\n      updatedLines[index] = targetLine;\n      return updatedLines;\n    });\n  };\n  console.log(lineArr);\n  const handleAddLine = () => {\n    // initialize new pixel objects\n    const newLine = new Line(new Pixel(0, 0), new Pixel(0, 0));\n    // initialize new line object and insert into array\n    setLineArr([...lineArr, newLine]);\n  };\n  const printLines = () => {\n    console.log(\"PRINTING LINES\");\n    lineArr.map((item, index) => {\n      console.log(`${index}: (${item.p0.x}, ${item.p0.y}), (${item.p1.x}, ${item.p1.y})`);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Rasterizer in the Web\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      lineArr: lineArr,\n      width: canvasSize.x,\n      height: canvasSize.y\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), lineArr.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line-field-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Line \", index]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(LineField, {\n        lineIndex: index,\n        lineObj: item,\n        handleChangeLine: handleChangeLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleAddLine,\n      children: \"Add Line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: printLines,\n      children: \"Print Lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"xbGb4t5QuHgXVs3ETjsoKFmpCJc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Canvas","LineField","Pixel","Line","jsxDEV","_jsxDEV","App","_s","canvasSize","x","y","lineArr","setLineArr","handleChangeLine","index","point","axis","value","prevLineArr","console","log","updatedLines","targetLine","p0","p1","handleAddLine","newLine","printLines","map","item","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","width","height","className","lineIndex","lineObj","type","onClick","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Canvas from \"./components/Canvas.tsx\";\nimport LineField from \"./components/LineField.tsx\";\nimport { Pixel } from \"./components/Pixel.tsx\";\nimport { Line } from \"./components/Line.tsx\";\n\nconst App: React.FC = () => {\n\n    const canvasSize = { x: 640, y: 480 };\n\n    const [lineArr, setLineArr] = useState<Line[]>(\n        [new Line(\n            new Pixel(0, 0),\n            new Pixel(0, 0)\n        )]\n    );\n\n    // buggy??\n    // const handleChangeLine = (\n    //     index: number,\n    //     point: number,\n    //     axis: string,\n    //     value: number\n    // ): void => {\n    //     setLineArr((prevLineArr) => {\n    //         const updatedLines = [...prevLineArr];\n    //         const targetLine = updatedLines[index];\n\n    //         if (point === 0) {\n    //             // Update coordinates for point 0\n    //             if (axis === \"x\") {\n    //                 targetLine.p0.x = value;\n    //             } else {\n    //                 targetLine.p0.y = value;\n    //             }\n    //         } else {\n    //             // Update coordinates for point 1\n    //             if (axis === \"x\") {\n    //                 targetLine.p1.x = value;\n    //             } else {\n    //                 targetLine.p1.y = value;\n    //             }\n    //         }\n\n    //         return updatedLines;\n    //     });\n    // };\n\n    const handleChangeLine = (\n        index: number,\n        point: number,\n        axis: string,\n        value: number\n    ): void => {\n        setLineArr((prevLineArr) => {\n            console.log(prevLineArr)\n            const updatedLines: Line[] = [...prevLineArr];\n            const targetLine: Line = new Line(\n                new Pixel(updatedLines[index].p0.x, updatedLines[index].p0.y),\n                new Pixel(updatedLines[index].p1.x, updatedLines[index].p1.y)\n            );\n            // Update the appropriate coordinate based on point and axis\n            if (point === 0) {\n                targetLine.p0 = new Pixel(\n                    axis === \"x\" ? value : targetLine.p0.x,\n                    axis === \"y\" ? value : targetLine.p0.y\n                );\n            } else {\n                targetLine.p1 = new Pixel(\n                    axis === \"x\" ? value : targetLine.p1.x,\n                    axis === \"y\" ? value : targetLine.p1.y\n                );\n            }\n            updatedLines[index] = targetLine;\n            return updatedLines;\n        })\n    };\n\n    console.log(lineArr);\n\n\n    const handleAddLine = (): void => {\n        // initialize new pixel objects\n        const newLine = new Line(new Pixel(0, 0), new Pixel(0, 0));\n        // initialize new line object and insert into array\n        setLineArr([...lineArr, newLine]);\n    }\n\n    const printLines = (): void => {\n        console.log(\"PRINTING LINES\")\n        lineArr.map((item, index) => {\n            console.log(`${index}: (${item.p0.x}, ${item.p0.y}), (${item.p1.x}, ${item.p1.y})`)\n        })\n    }\n\n    return (\n        <div>\n            <h1 style={{ textAlign: \"center\" }}>Rasterizer in the Web</h1>\n            <Canvas\n                lineArr={lineArr}\n                width={canvasSize.x}\n                height={canvasSize.y}\n            />\n            {lineArr.map((item: Line, index: number) => (\n                <div className=\"line-field-div\" key={index}>\n                    <h3>Line {index}</h3>\n                    <LineField\n                        lineIndex={index}\n                        lineObj={item}\n                        handleChangeLine={handleChangeLine}\n                    />\n                </div>\n            ))}\n            <button type=\"button\" onClick={handleAddLine}>\n                Add Line\n            </button>\n            <button onClick={printLines}>Print Lines</button>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}