{"ast":null,"code":"import React,{useEffect,useRef}from'react';import{Pixel}from\"./Pixel.tsx\";import{jsx as _jsx}from\"react/jsx-runtime\";const Canvas=_ref=>{let{width,height,lineArr}=_ref;// obtain React reference to canvas node\nconst canvasRef=useRef(null);// render after state (canvas size, scene objects, etc.) changes\nuseEffect(()=>{// access actual DOM node\nconst canvas=canvasRef.current;if(!canvas)return;// rendering context\nconst context=canvas.getContext('2d',{willReadFrequently:true});if(!context)return;// clear canvas\ncontext.clearRect(0,0,canvas.width,canvas.height);/* ImageData is an array containing color data for each pixel.\n        For a given pixel at position i in the buffer:\n            - canvasBuffer.data[i] corresponds to Red\n            - canvasBuffer.data[i + 1] corresponds to Green\n            - canvasBuffer.data[i + 2] corresponds to Blue\n            - canvasBuffer.data[i + 3] corresponds to Alpha */const canvasBuffer=context.getImageData(0,0,canvas.width,canvas.height);const canvasPitch=canvasBuffer.width*4;// main drawing method\nconst putPixel=(x,y,color)=>{x=canvas.width/2+(x|0);y=canvas.height/2-(y|0)-1;if(x<0||x>=canvas.width||y<0||y>=canvas.height){return;}// obtain indices of pixel's color data\nvar offset=4*x+canvasPitch*y;// iterate through rgba properties\ncanvasBuffer.data[offset++]=color[0];canvasBuffer.data[offset++]=color[1];canvasBuffer.data[offset++]=color[2];canvasBuffer.data[offset++]=255;// Alpha\n};// switch front buffer and back buffer\nconst updateCanvas=()=>{context.putImageData(canvasBuffer,0,0);};// for each i in domain [i0, i1], obtain values d in range [d0, d1]\nconst interpolate=(i0,d0,i1,d1)=>{if(i0==i1)return[d0];// single value d = f(i)\nconst values=[];const a=(d1-d0)/(i1-i0);let d=d0;// for each step x/y, increase y/x by slope a\nfor(let i=i0;i<=i1;i++){values.push(d);d+=a;}return values;};const drawLine=(p0,p1,color)=>{const dx=p1.x-p0.x;const dy=p1.y-p0.y;if(Math.abs(dx)>Math.abs(dy)){// The line below is BUGGED: pass-by-reference switches objects outside the function\n// if (p0.x > p1.x) [p0.x, p1.x] = [p1.x, p0.x];\n// horizontal-ish line, swap to make line left to right\nconst startPixel=p0.x>p1.x?p1:p0;const endPixel=p0.x>p1.x?p0:p1;// obtain and draw y values at each x\nconst ys=interpolate(startPixel.x,startPixel.y,endPixel.x,endPixel.y);for(let x=startPixel.x;x<=endPixel.x;x++){const interpolatedY=ys[x-startPixel.x|0];putPixel(x,interpolatedY,color);}}else{// BUGGED: pass-by-reference switches objects outside the function\n// if (p0.y > p1.y) [p0.y, p1.y] = [p1.y, p0.y];\n// vertical-ish line, swap to make line bottom to top\nconst startPixel=p0.y>p1.y?p1:p0;const endPixel=p0.y>p1.y?p0:p1;// obtain and draw x values for each y\nconst xs=interpolate(startPixel.y,startPixel.x,endPixel.y,endPixel.x);for(let y=startPixel.y;y<=endPixel.y;y++){const interpolatedX=xs[y-startPixel.y|0];putPixel(interpolatedX,y,color);}}};const drawWireframeTriangle=(p0,p1,p2,color)=>{drawLine(p0,p1,color);drawLine(p1,p2,color);drawLine(p0,p2,color);};const drawFilledTriangle=(p0,p1,p2,color)=>{// swap points from lowest to highest\nif(p1.y<p0.y)[p1,p0]=[p0,p1];if(p2.y<p0.y)[p2,p0]=[p0,p2];if(p2.y<p1.y)[p2,p1]=[p1,p2];// for each y, obtain x and h values\nlet x01=interpolate(p0.y,p0.x,p1.y,p1.x);let h01=interpolate(p0.y,p0.h,p1.y,p1.h);let x12=interpolate(p1.y,p1.x,p2.y,p2.x);let h12=interpolate(p1.y,p1.h,p2.y,p2.h);let x02=interpolate(p0.y,p0.x,p2.y,p2.x);let h02=interpolate(p0.y,p0.h,p2.y,p2.h);// connect two short sides\nx01.pop();h01.pop();let x012=x01.concat(x12);let h012=h01.concat(h12);// use the middle of the triangle to determine left and right sides\nlet m=Math.floor(x012.length/2);let x_left;let h_left;let x_right;let h_right;if(x02[m]<x012[m]){x_left=x02;h_left=h02;x_right=x012;h_right=h012;}else{x_left=x012;h_left=h012;x_right=x02;h_right=h02;}// iterate from bottom to top\nfor(let yi=p0.y;yi<p2.y;yi++){// obtain the left and right x-values of the line\nlet x_l=x_left[yi-p0.y];let h_l=h_left[yi-p0.y];let x_r=x_right[yi-p0.y];let h_r=h_right[yi-p0.y];// obtain hue values at each x on the line at yi\nlet h_segment=interpolate(x_l,h_l,x_r,h_r);// iterate from left to right\nfor(let xi=x_left[yi-p0.y];xi<x_right[yi-p0.y];xi++){let shadedColor=[color[0]*h_segment[xi-x_l],color[1]*h_segment[xi-x_l],color[2]*h_segment[xi-x_l]];putPixel(xi,yi,shadedColor);}}};for(let i=0;i<lineArr.length;i++){drawLine(lineArr[i].p0,lineArr[i].p1,[0,0,0]);}// test green triangle\nlet p0=new Pixel(-200,-200,0);let p1=new Pixel(200,50,0.5);let p2=new Pixel(20,250,1.0);drawFilledTriangle(p0,p1,p2,[255,0,255]);drawWireframeTriangle(p0,p1,p2,[0,0,0]);updateCanvas();},[lineArr]);return/*#__PURE__*/_jsx(\"div\",{className:\"centered\",children:/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:width,height:height,style:{display:'block',margin:'auto',border:'1px grey solid'}})});};export default Canvas;","map":{"version":3,"names":["React","useEffect","useRef","Pixel","jsx","_jsx","Canvas","_ref","width","height","lineArr","canvasRef","canvas","current","context","getContext","willReadFrequently","clearRect","canvasBuffer","getImageData","canvasPitch","putPixel","x","y","color","offset","data","updateCanvas","putImageData","interpolate","i0","d0","i1","d1","values","a","d","i","push","drawLine","p0","p1","dx","dy","Math","abs","startPixel","endPixel","ys","interpolatedY","xs","interpolatedX","drawWireframeTriangle","p2","drawFilledTriangle","x01","h01","h","x12","h12","x02","h02","pop","x012","concat","h012","m","floor","length","x_left","h_left","x_right","h_right","yi","x_l","h_l","x_r","h_r","h_segment","xi","shadedColor","className","children","ref","style","display","margin","border"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport { Pixel } from \"./Pixel.tsx\"\nimport { Line } from \"./Line.tsx\"\n\ninterface CanvasProps {\n    width: number;\n    height: number;\n    lineArr: Line[];\n}\n\nconst Canvas: React.FC<CanvasProps> = ({ width, height, lineArr }) => {\n\n    // obtain React reference to canvas node\n    const canvasRef: React.RefObject<HTMLCanvasElement> = useRef<HTMLCanvasElement>(null);\n\n    // render after state (canvas size, scene objects, etc.) changes\n    useEffect(() => {\n\n        // access actual DOM node\n        const canvas: HTMLCanvasElement | null = canvasRef.current;\n        if (!canvas) return;\n\n        // rendering context\n        const context: CanvasRenderingContext2D | null = canvas.getContext('2d', { willReadFrequently: true });\n        if (!context) return;\n\n        // clear canvas\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        /* ImageData is an array containing color data for each pixel.\n        For a given pixel at position i in the buffer:\n            - canvasBuffer.data[i] corresponds to Red\n            - canvasBuffer.data[i + 1] corresponds to Green\n            - canvasBuffer.data[i + 2] corresponds to Blue\n            - canvasBuffer.data[i + 3] corresponds to Alpha */\n        const canvasBuffer: ImageData = context.getImageData(0, 0, canvas.width, canvas.height);\n        const canvasPitch: number = canvasBuffer.width * 4;\n\n        // main drawing method\n        const putPixel = (x: number, y: number, color: number[]): void => {\n\n            x = canvas.width / 2 + (x | 0);\n            y = canvas.height / 2 - (y | 0) - 1;\n\n            if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {\n                return;\n            }\n\n            // obtain indices of pixel's color data\n            var offset = 4 * x + canvasPitch * y;\n\n            // iterate through rgba properties\n            canvasBuffer.data[offset++] = color[0];\n            canvasBuffer.data[offset++] = color[1];\n            canvasBuffer.data[offset++] = color[2];\n            canvasBuffer.data[offset++] = 255; // Alpha\n\n        };\n\n        // switch front buffer and back buffer\n        const updateCanvas = () => {\n            context.putImageData(canvasBuffer, 0, 0);\n        };\n\n        // for each i in domain [i0, i1], obtain values d in range [d0, d1]\n        const interpolate = (i0: number, d0: number, i1: number, d1: number): number[] => {\n            if (i0 == i1) return [d0]; // single value d = f(i)\n\n            const values: number[] = [];\n            const a: number = (d1 - d0) / (i1 - i0);\n            let d = d0;\n\n            // for each step x/y, increase y/x by slope a\n            for (let i = i0; i <= i1; i++) {\n                values.push(d);\n                d += a;\n            }\n\n            return values;\n        };\n\n        const drawLine = (p0: Pixel, p1: Pixel, color: number[]): void => {\n            const dx: number = p1.x - p0.x;\n            const dy: number = p1.y - p0.y;\n\n            if (Math.abs(dx) > Math.abs(dy)) {\n                // The line below is BUGGED: pass-by-reference switches objects outside the function\n                // if (p0.x > p1.x) [p0.x, p1.x] = [p1.x, p0.x];\n\n                // horizontal-ish line, swap to make line left to right\n                const startPixel = p0.x > p1.x ? p1 : p0;\n                const endPixel = p0.x > p1.x ? p0 : p1;\n\n                // obtain and draw y values at each x\n                const ys: number[] = interpolate(startPixel.x, startPixel.y, endPixel.x, endPixel.y);\n\n                for (let x = startPixel.x; x <= endPixel.x; x++) {\n                    const interpolatedY = ys[x - startPixel.x | 0];\n                    putPixel(x, interpolatedY, color);\n                }\n            } else {\n                // BUGGED: pass-by-reference switches objects outside the function\n                // if (p0.y > p1.y) [p0.y, p1.y] = [p1.y, p0.y];\n                \n                // vertical-ish line, swap to make line bottom to top\n                const startPixel = p0.y > p1.y ? p1 : p0;\n                const endPixel = p0.y > p1.y ? p0 : p1;\n\n                // obtain and draw x values for each y\n                const xs: number[] = interpolate(startPixel.y, startPixel.x, endPixel.y, endPixel.x);\n\n                for (let y = startPixel.y; y <= endPixel.y; y++) {\n                    const interpolatedX = xs[y - startPixel.y | 0];\n                    putPixel(interpolatedX, y, color);\n                }\n            }\n        };\n\n\n        const drawWireframeTriangle = (p0: Pixel, p1: Pixel, p2: Pixel, color: number[]): void => {\n            drawLine(p0, p1, color);\n            drawLine(p1, p2, color);\n            drawLine(p0, p2, color);\n        }\n\n        const drawFilledTriangle = (p0: Pixel, p1: Pixel, p2: Pixel, color: number[]): void => {\n\n            // swap points from lowest to highest\n            if (p1.y < p0.y) [p1, p0] = [p0, p1];\n            if (p2.y < p0.y) [p2, p0] = [p0, p2];\n            if (p2.y < p1.y) [p2, p1] = [p1, p2];\n\n            // for each y, obtain x and h values\n            let x01: number[] = interpolate(p0.y, p0.x, p1.y, p1.x);\n            let h01: number[] = interpolate(p0.y, p0.h, p1.y, p1.h);\n\n            let x12: number[] = interpolate(p1.y, p1.x, p2.y, p2.x);\n            let h12: number[] = interpolate(p1.y, p1.h, p2.y, p2.h);\n\n            let x02: number[] = interpolate(p0.y, p0.x, p2.y, p2.x);\n            let h02: number[] = interpolate(p0.y, p0.h, p2.y, p2.h);\n\n            // connect two short sides\n            x01.pop();\n            h01.pop();\n\n            let x012: number[] = x01.concat(x12);\n            let h012: number[] = h01.concat(h12);\n\n            // use the middle of the triangle to determine left and right sides\n            let m: number = Math.floor(x012.length / 2);\n\n            let x_left: number[];\n            let h_left: number[];\n\n            let x_right: number[];\n            let h_right: number[];\n\n            if (x02[m] < x012[m]) {\n                x_left = x02;\n                h_left = h02;\n\n                x_right = x012;\n                h_right = h012;\n            } else {\n                x_left = x012;\n                h_left = h012;\n\n                x_right = x02;\n                h_right = h02;\n            }\n\n            // iterate from bottom to top\n            for (let yi = p0.y; yi < p2.y; yi++) {\n\n                // obtain the left and right x-values of the line\n                let x_l: number = x_left[yi - p0.y];\n                let h_l: number = h_left[yi - p0.y];\n\n                let x_r: number = x_right[yi - p0.y];\n                let h_r: number = h_right[yi - p0.y];\n\n                // obtain hue values at each x on the line at yi\n                let h_segment: number[] = interpolate(x_l, h_l, x_r, h_r);\n\n                // iterate from left to right\n                for (let xi = x_left[yi - p0.y]; xi < x_right[yi - p0.y]; xi++) {\n                    let shadedColor: number[] = [\n                        color[0] * h_segment[xi - x_l],\n                        color[1] * h_segment[xi - x_l],\n                        color[2] * h_segment[xi - x_l]\n                    ]\n                    putPixel(xi, yi, shadedColor);\n                }\n            }\n        }\n\n        for (let i = 0; i < lineArr.length; i++) {\n            drawLine(lineArr[i].p0, lineArr[i].p1, [0,0,0]);\n        }\n\n        // test green triangle\n        let p0 = new Pixel(-200, -200, 0);\n        let p1 = new Pixel(200, 50, 0.5);\n        let p2 = new Pixel(20, 250, 1.0);\n\n        drawFilledTriangle(p0, p1, p2, [255, 0, 255]);\n        drawWireframeTriangle(p0, p1, p2, [0, 0, 0]);\n\n        updateCanvas();\n\n    }, [lineArr]);\n\n    return (\n        <div className=\"centered\">\n            <canvas\n                ref={canvasRef}\n                width={width}\n                height={height}\n                style={{\n                    display: 'block',\n                    margin: 'auto',\n                    border: '1px grey solid'\n                }}\n            >\n            </canvas>\n        </div>\n    );\n};\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}