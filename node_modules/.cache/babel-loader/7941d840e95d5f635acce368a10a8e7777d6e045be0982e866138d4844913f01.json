{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Canvas from \"./components/Canvas.tsx\";\nimport LineField from \"./components/LineField.tsx\";\nimport { Pixel } from \"./components/Pixel.tsx\";\nimport { Line } from \"./components/Line.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const canvasSize = {\n    x: 640,\n    y: 480\n  };\n  const defaultP0 = new Pixel(0, 0);\n  const defaultP1 = new Pixel(canvasSize.x / 2, canvasSize.y / 2);\n  const [lineArr, setLineArr] = useState([new Line(defaultP0, defaultP1)]);\n  const handleLineChange = (index, property, value) => {\n    setLineArr(prevLineArr => {\n      const updatedLineArr = [...prevLineArr];\n      const updatedPoint = new Pixel(Number(value), property === 'y' ? updatedLineArr[index].p0.y : updatedLineArr[index].p1.y);\n\n      // Update the corresponding point in the line\n      if (property === 'x') {\n        updatedLineArr[index] = new Line(updatedPoint, updatedLineArr[index].p1);\n      } else if (property === 'y') {\n        updatedLineArr[index] = new Line(updatedLineArr[index].p0, updatedPoint);\n      }\n      return updatedLineArr;\n    });\n  };\n  const addLineField = () => {\n    setLineArr([...lineArr, new Line(defaultP0, defaultP1)]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Rasterizer in the Web\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      width: canvasSize.x,\n      height: canvasSize.y\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), lineArr.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Line \", index]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(LineField, {\n        lineIndex: index,\n        handleLineChange: handleLineChange,\n        canvasWidth: canvasSize.x,\n        canvasHeight: canvasSize.y\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addLineField,\n      children: \"Add Line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"rpfJzJzZNC8D6LM9EkSWXQUYc/A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Canvas","LineField","Pixel","Line","jsxDEV","_jsxDEV","App","_s","canvasSize","x","y","defaultP0","defaultP1","lineArr","setLineArr","handleLineChange","index","property","value","prevLineArr","updatedLineArr","updatedPoint","Number","p0","p1","addLineField","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","width","height","map","item","lineIndex","canvasWidth","canvasHeight","type","onClick","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Canvas from \"./components/Canvas.tsx\";\nimport LineField from \"./components/LineField.tsx\";\nimport { Pixel } from \"./components/Pixel.tsx\";\nimport { Line } from \"./components/Line.tsx\";\n\nconst App: React.FC = () => {\n\n    const canvasSize = { x: 640, y: 480 };\n\n    const defaultP0 = new Pixel(0, 0);\n    const defaultP1 = new Pixel(canvasSize.x / 2, canvasSize.y / 2);\n\n    const [lineArr, setLineArr] = useState<Line[]>([new Line(defaultP0, defaultP1)]);\n\n    const handleLineChange = (index: number, property: string, value: string) => {\n        setLineArr((prevLineArr) => {\n            const updatedLineArr = [...prevLineArr];\n            const updatedPoint = new Pixel(Number(value), property === 'y' ? updatedLineArr[index].p0.y : updatedLineArr[index].p1.y);\n\n            // Update the corresponding point in the line\n            if (property === 'x') {\n                updatedLineArr[index] = new Line(updatedPoint, updatedLineArr[index].p1);\n            } else if (property === 'y') {\n                updatedLineArr[index] = new Line(updatedLineArr[index].p0, updatedPoint);\n            }\n\n            return updatedLineArr;\n        });\n    }\n\n    const addLineField = (): void => {\n        setLineArr([...lineArr, new Line(defaultP0, defaultP1)]);\n    }\n\n    return (\n        <div>\n            <h1 style={{ textAlign: \"center\" }}>Rasterizer in the Web</h1>\n            <Canvas\n                width={canvasSize.x}\n                height={canvasSize.y}\n            />\n            {lineArr.map((item: Line, index: number) => (\n                <div>\n                    <h3>Line {index}</h3>\n                    <LineField\n                        lineIndex={index}\n                        handleLineChange={handleLineChange}\n                        canvasWidth={canvasSize.x}\n                        canvasHeight={canvasSize.y}\n                    />\n                </div>\n            ))}\n            <button type=\"button\" onClick={addLineField}>\n                Add Line\n            </button>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,SAAS,MAAM,4BAA4B;AAClD,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,IAAI,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAExB,MAAMC,UAAU,GAAG;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI,CAAC;EAErC,MAAMC,SAAS,GAAG,IAAIT,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACjC,MAAMU,SAAS,GAAG,IAAIV,KAAK,CAACM,UAAU,CAACC,CAAC,GAAG,CAAC,EAAED,UAAU,CAACE,CAAC,GAAG,CAAC,CAAC;EAE/D,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAS,CAAC,IAAII,IAAI,CAACQ,SAAS,EAAEC,SAAS,CAAC,CAAC,CAAC;EAEhF,MAAMG,gBAAgB,GAAGA,CAACC,KAAa,EAAEC,QAAgB,EAAEC,KAAa,KAAK;IACzEJ,UAAU,CAAEK,WAAW,IAAK;MACxB,MAAMC,cAAc,GAAG,CAAC,GAAGD,WAAW,CAAC;MACvC,MAAME,YAAY,GAAG,IAAInB,KAAK,CAACoB,MAAM,CAACJ,KAAK,CAAC,EAAED,QAAQ,KAAK,GAAG,GAAGG,cAAc,CAACJ,KAAK,CAAC,CAACO,EAAE,CAACb,CAAC,GAAGU,cAAc,CAACJ,KAAK,CAAC,CAACQ,EAAE,CAACd,CAAC,CAAC;;MAEzH;MACA,IAAIO,QAAQ,KAAK,GAAG,EAAE;QAClBG,cAAc,CAACJ,KAAK,CAAC,GAAG,IAAIb,IAAI,CAACkB,YAAY,EAAED,cAAc,CAACJ,KAAK,CAAC,CAACQ,EAAE,CAAC;MAC5E,CAAC,MAAM,IAAIP,QAAQ,KAAK,GAAG,EAAE;QACzBG,cAAc,CAACJ,KAAK,CAAC,GAAG,IAAIb,IAAI,CAACiB,cAAc,CAACJ,KAAK,CAAC,CAACO,EAAE,EAAEF,YAAY,CAAC;MAC5E;MAEA,OAAOD,cAAc;IACzB,CAAC,CAAC;EACN,CAAC;EAED,MAAMK,YAAY,GAAGA,CAAA,KAAY;IAC7BX,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAE,IAAIV,IAAI,CAACQ,SAAS,EAAEC,SAAS,CAAC,CAAC,CAAC;EAC5D,CAAC;EAED,oBACIP,OAAA;IAAAqB,QAAA,gBACIrB,OAAA;MAAIsB,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,EAAC;IAAqB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9D3B,OAAA,CAACL,MAAM;MACHiC,KAAK,EAAEzB,UAAU,CAACC,CAAE;MACpByB,MAAM,EAAE1B,UAAU,CAACE;IAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,EACDnB,OAAO,CAACsB,GAAG,CAAC,CAACC,IAAU,EAAEpB,KAAa,kBACnCX,OAAA;MAAAqB,QAAA,gBACIrB,OAAA;QAAAqB,QAAA,GAAI,OAAK,EAACV,KAAK;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrB3B,OAAA,CAACJ,SAAS;QACNoC,SAAS,EAAErB,KAAM;QACjBD,gBAAgB,EAAEA,gBAAiB;QACnCuB,WAAW,EAAE9B,UAAU,CAACC,CAAE;QAC1B8B,YAAY,EAAE/B,UAAU,CAACE;MAAE;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACR,CAAC,eACF3B,OAAA;MAAQmC,IAAI,EAAC,QAAQ;MAACC,OAAO,EAAEhB,YAAa;MAAAC,QAAA,EAAC;IAE7C;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACzB,EAAA,CApDID,GAAa;AAAAoC,EAAA,GAAbpC,GAAa;AAsDnB,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}