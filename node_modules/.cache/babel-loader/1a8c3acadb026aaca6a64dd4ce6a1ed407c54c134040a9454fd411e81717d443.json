{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  width,\n  height,\n  lineArr\n}) => {\n  _s();\n  /* CANVAS CONTEXT CODE */\n  //\n  //\n\n  // obtain React reference to canvas node\n  const canvasRef = useRef(null);\n\n  // access actual DOM node\n  const canvas = canvasRef.current;\n  if (!canvas) return;\n\n  // rendering context\n  const context = canvas.getContext('2d');\n  if (!context) return;\n\n  /* ImageData is an array containing color data for each pixel.\n  For a given pixel at position i in the buffer:\n      - canvasBuffer.data[i] corresponds to Red\n      - canvasBuffer.data[i + 1] corresponds to Green\n      - canvasBuffer.data[i + 2] corresponds to Blue\n      - canvasBuffer.data[i + 3] corresponds to Alpha */\n  const canvasBuffer = context.getImageData(0, 0, canvas.width, canvas.height);\n  const canvasPitch = canvasBuffer.width * 4;\n  const putPixel = (x, y, color) => {\n    x = canvas.width / 2 + (x | 0);\n    y = canvas.height / 2 - (y | 0) - 1;\n    if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {\n      return;\n    }\n\n    // obtain indices of pixel's color data\n    var offset = 4 * x + canvasPitch * y;\n\n    // iterate through rgba properties\n    canvasBuffer.data[offset++] = color[0];\n    canvasBuffer.data[offset++] = color[1];\n    canvasBuffer.data[offset++] = color[2];\n    canvasBuffer.data[offset++] = 255; // Alpha\n  };\n  const updateCanvas = () => {\n    context.putImageData(canvasBuffer, 0, 0);\n  };\n\n  //\n  //\n  /* END OF CANVAS CONTEXT CODE */\n\n  /* RASTERIZATION ALGS */\n  //\n  //\n\n  const interpolate = (i0, d0, i1, d1) => {\n    // single value d = f(i)\n    if (i0 == i1) return [d0];\n    const values = [];\n    const a = (d1 - d0) / (i1 - i0);\n    let d = d0;\n\n    // for each step x/y, increase y/x by slope a\n    for (let i = i0; i < i1; i++) {\n      values.push(d);\n      d += a;\n    }\n    return values;\n  };\n  const drawLine = (p0, p1, color) => {\n    const dx = p1.x - p0.x;\n    const dy = p1.y - p0.y;\n    if (Math.abs(dx) > Math.abs(dy)) {\n      // line is more horizontal\n      if (p0.x > p1.x) {\n        [p0.x, p1.x] = [p1.x, p0.x]; // swap\n      }\n      const ys = interpolate(p0.x, p0.y, p1.x, p1.y);\n      for (let x = p0.x; x < p1.x; x++) {\n        putPixel(x, ys[x - p0.x], color);\n      }\n    } else {\n      // line is more vertical\n      if (p0.y > p1.y) {\n        [p0.y, p1.y] = [p1.y, p0.y];\n      }\n      const xs = interpolate(p0.y, p0.x, p1.y, p1.x);\n      for (let y = p0.y; y < p1.y; y++) {\n        putPixel(y, xs[y - p0.y], color);\n      }\n    }\n  };\n\n  // render after state (canvas size, scene objects, etc.) changes\n  useEffect(() => {\n    // Call DrawLine and UpdateCanvas with desired parameters\n    for (let i = 0; i < lineArr.length; i++) {\n      drawLine(lineArr[i].p0, lineArr[i].p1, [0, 0, 0]);\n    }\n    updateCanvas();\n    console.log(\"Updated canvas\");\n  }, [lineArr]);\n\n  /* RASTERIZATION ALGS */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: width,\n      height: height,\n      style: {\n        display: 'block',\n        margin: 'auto',\n        border: '1px grey solid'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(Canvas, \"w+GwAnmPg43zn8eCi/IPmMtIL9w=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Canvas","width","height","lineArr","_s","canvasRef","canvas","current","context","getContext","canvasBuffer","getImageData","canvasPitch","putPixel","x","y","color","offset","data","updateCanvas","putImageData","interpolate","i0","d0","i1","d1","values","a","d","i","push","drawLine","p0","p1","dx","dy","Math","abs","ys","xs","length","console","log","className","children","ref","style","display","margin","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Canvas.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport { Pixel } from \"./Pixel.tsx\"\nimport { Line } from \"./Line.tsx\"\n\ninterface CanvasProps {\n    width: number;\n    height: number;\n    lineArr: Line[];\n}\n\nconst Canvas: React.FC<CanvasProps> = ({ width, height, lineArr }) => {\n\n    /* CANVAS CONTEXT CODE */\n    //\n    //\n\n    // obtain React reference to canvas node\n    const canvasRef: React.RefObject<HTMLCanvasElement> = useRef<HTMLCanvasElement>(null);\n\n    // access actual DOM node\n    const canvas: HTMLCanvasElement | null = canvasRef.current;\n    if (!canvas) return;\n\n    // rendering context\n    const context: CanvasRenderingContext2D | null = canvas.getContext('2d');\n    if (!context) return;\n\n    /* ImageData is an array containing color data for each pixel.\n    For a given pixel at position i in the buffer:\n        - canvasBuffer.data[i] corresponds to Red\n        - canvasBuffer.data[i + 1] corresponds to Green\n        - canvasBuffer.data[i + 2] corresponds to Blue\n        - canvasBuffer.data[i + 3] corresponds to Alpha */\n    const canvasBuffer: ImageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    const canvasPitch: number = canvasBuffer.width * 4;\n    const putPixel = (x: number, y: number, color: number[]): void => {\n\n        x = canvas.width / 2 + (x | 0);\n        y = canvas.height / 2 - (y | 0) - 1;\n\n        if (x < 0 || x >= canvas.width || y < 0 || y >= canvas.height) {\n            return;\n        }\n\n        // obtain indices of pixel's color data\n        var offset = 4 * x + canvasPitch * y;\n\n        // iterate through rgba properties\n        canvasBuffer.data[offset++] = color[0];\n        canvasBuffer.data[offset++] = color[1];\n        canvasBuffer.data[offset++] = color[2];\n        canvasBuffer.data[offset++] = 255; // Alpha\n\n    };\n\n    const updateCanvas = () => {\n        context.putImageData(canvasBuffer, 0, 0);\n    };\n\n    //\n    //\n    /* END OF CANVAS CONTEXT CODE */\n\n    /* RASTERIZATION ALGS */\n    //\n    //\n\n    const interpolate = (i0: number, d0: number, i1: number, d1: number): number[] => {\n\n        // single value d = f(i)\n        if (i0 == i1) return [d0];\n\n        const values: number[] = [];\n        const a: number = (d1 - d0) / (i1 - i0);\n        let d = d0;\n\n        // for each step x/y, increase y/x by slope a\n        for (let i = i0; i < i1; i++) {\n            values.push(d);\n            d += a;\n        }\n\n        return values;\n\n    };\n\n    const drawLine = (p0: Pixel, p1: Pixel, color: number[]): void => {\n\n        const dx: number = p1.x - p0.x;\n        const dy: number = p1.y - p0.y;\n\n        if (Math.abs(dx) > Math.abs(dy)) {\n            // line is more horizontal\n            if (p0.x > p1.x) {\n                [p0.x, p1.x] = [p1.x, p0.x]; // swap\n            }\n            const ys: number[] = interpolate(p0.x, p0.y, p1.x, p1.y);\n            for (let x = p0.x; x < p1.x; x++) {\n                putPixel(x, ys[x - p0.x], color);\n            }\n        } else {\n            // line is more vertical\n            if (p0.y > p1.y) {\n                [p0.y, p1.y] = [p1.y, p0.y];\n            }\n            const xs: number[] = interpolate(p0.y, p0.x, p1.y, p1.x);\n            for (let y = p0.y; y < p1.y; y++) {\n                putPixel(y, xs[y - p0.y], color);\n            }\n        }\n    };\n\n    // render after state (canvas size, scene objects, etc.) changes\n    useEffect(() => {\n        // Call DrawLine and UpdateCanvas with desired parameters\n        for (let i = 0; i < lineArr.length; i++) {\n            drawLine(lineArr[i].p0, lineArr[i].p1, [0, 0, 0]);\n        }\n        updateCanvas();\n        console.log(\"Updated canvas\");\n    }, [lineArr]);\n\n    /* RASTERIZATION ALGS */\n\n    return (\n        <div className=\"centered\">\n            <canvas\n                ref={canvasRef}\n                width={width}\n                height={height}\n                style={{\n                    display: 'block',\n                    margin: 'auto',\n                    border: '1px grey solid'\n                }}\n            >\n            </canvas>\n        </div>\n    );\n};\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}