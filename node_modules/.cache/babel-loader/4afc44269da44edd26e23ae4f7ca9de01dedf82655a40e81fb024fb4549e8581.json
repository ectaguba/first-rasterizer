{"ast":null,"code":"import { Pixel } from \"./Pixel.tsx\";\nexport class Line {\n  constructor(p0, p1) {\n    this._p0 = void 0;\n    this._p1 = void 0;\n    this._p0 = p0;\n    this._p1 = p1;\n  }\n  get p0() {\n    return this._p0;\n  }\n  get p1() {\n    return this._p1;\n  }\n  set p0(newP0) {\n    this._p0 = newP0;\n  }\n  set p1(newP1) {\n    this._p1 = newP1;\n  }\n  updatePoint(point, axis, value) {\n    let newP0 = this._p0;\n    let newP1 = this._p1;\n    if (point === 0) {\n      if (axis === 'x') {\n        newP0 = new Pixel(value, this._p0.y);\n      } else if (axis === 'y') {\n        newP0 = new Pixel(this._p0.x, value);\n      }\n    } else if (point === 1) {\n      if (axis === 'x') {\n        newP1 = new Pixel(value, this._p1.y);\n      } else if (axis === 'y') {\n        newP1 = new Pixel(this._p1.x, value);\n      }\n    }\n    return new Line(newP0, newP1);\n  }\n}","map":{"version":3,"names":["Pixel","Line","constructor","p0","p1","_p0","_p1","newP0","newP1","updatePoint","point","axis","value","y","x"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Line.tsx"],"sourcesContent":["import { Pixel } from \"./Pixel.tsx\";\n\nexport class Line {\n\n    private _p0: Pixel;\n    private _p1: Pixel;\n\n    constructor(p0: Pixel, p1: Pixel) {\n        this._p0 = p0;\n        this._p1 = p1;\n    }\n\n    get p0(): Pixel {\n        return this._p0;\n    }\n\n    get p1(): Pixel {\n        return this._p1;\n    }\n\n    set p0(newP0: Pixel) {\n        this._p0 = newP0;\n    }\n\n    set p1(newP1: Pixel) {\n        this._p1 = newP1;\n    }\n\n    updatePoint(point: number, axis: string, value: number): Line {\n        let newP0: Pixel = this._p0;\n        let newP1: Pixel = this._p1;\n\n        if (point === 0) {\n            if (axis === 'x') {\n                newP0 = new Pixel(value, this._p0.y);\n            } else if (axis === 'y') {\n                newP0 = new Pixel(this._p0.x, value);\n            }\n        } else if (point === 1) {\n            if (axis === 'x') {\n                newP1 = new Pixel(value, this._p1.y);\n            } else if (axis === 'y') {\n                newP1 = new Pixel(this._p1.x, value);\n            }\n        }\n        \n        return new Line(newP0, newP1);\n    }\n}\n\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,aAAa;AAEnC,OAAO,MAAMC,IAAI,CAAC;EAKdC,WAAWA,CAACC,EAAS,EAAEC,EAAS,EAAE;IAAA,KAH1BC,GAAG;IAAA,KACHC,GAAG;IAGP,IAAI,CAACD,GAAG,GAAGF,EAAE;IACb,IAAI,CAACG,GAAG,GAAGF,EAAE;EACjB;EAEA,IAAID,EAAEA,CAAA,EAAU;IACZ,OAAO,IAAI,CAACE,GAAG;EACnB;EAEA,IAAID,EAAEA,CAAA,EAAU;IACZ,OAAO,IAAI,CAACE,GAAG;EACnB;EAEA,IAAIH,EAAEA,CAACI,KAAY,EAAE;IACjB,IAAI,CAACF,GAAG,GAAGE,KAAK;EACpB;EAEA,IAAIH,EAAEA,CAACI,KAAY,EAAE;IACjB,IAAI,CAACF,GAAG,GAAGE,KAAK;EACpB;EAEAC,WAAWA,CAACC,KAAa,EAAEC,IAAY,EAAEC,KAAa,EAAQ;IAC1D,IAAIL,KAAY,GAAG,IAAI,CAACF,GAAG;IAC3B,IAAIG,KAAY,GAAG,IAAI,CAACF,GAAG;IAE3B,IAAII,KAAK,KAAK,CAAC,EAAE;MACb,IAAIC,IAAI,KAAK,GAAG,EAAE;QACdJ,KAAK,GAAG,IAAIP,KAAK,CAACY,KAAK,EAAE,IAAI,CAACP,GAAG,CAACQ,CAAC,CAAC;MACxC,CAAC,MAAM,IAAIF,IAAI,KAAK,GAAG,EAAE;QACrBJ,KAAK,GAAG,IAAIP,KAAK,CAAC,IAAI,CAACK,GAAG,CAACS,CAAC,EAAEF,KAAK,CAAC;MACxC;IACJ,CAAC,MAAM,IAAIF,KAAK,KAAK,CAAC,EAAE;MACpB,IAAIC,IAAI,KAAK,GAAG,EAAE;QACdH,KAAK,GAAG,IAAIR,KAAK,CAACY,KAAK,EAAE,IAAI,CAACN,GAAG,CAACO,CAAC,CAAC;MACxC,CAAC,MAAM,IAAIF,IAAI,KAAK,GAAG,EAAE;QACrBH,KAAK,GAAG,IAAIR,KAAK,CAAC,IAAI,CAACM,GAAG,CAACQ,CAAC,EAAEF,KAAK,CAAC;MACxC;IACJ;IAEA,OAAO,IAAIX,IAAI,CAACM,KAAK,EAAEC,KAAK,CAAC;EACjC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}