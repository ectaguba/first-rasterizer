{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/react_exercises_for_beginners/src/App10/components/GenerateImageBtn.jsx\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenerateImageBtn() {\n  const getRandomDogImage = async () => {\n    setLoading(true); // load before call\n    setError(null);\n    try {\n      const response = await fetch('https://dog.ceo/api/breeds/image/random');\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const data = await response.json();\n      if (data.status === \"success\") {\n        setImg(data.message);\n      } else {\n        setError('Failed to fetch image');\n      }\n    } catch (error) {\n      setError('Failed to fetch image');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleButtonClick = () => {\n    getRandomDogImage();\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleButtonClick,\n    disabled: loading,\n    children: loading ? 'Loading...' : 'Get Random Dog Image'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_c = GenerateImageBtn;\nexport default GenerateImageBtn;\nvar _c;\n$RefreshReg$(_c, \"GenerateImageBtn\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GenerateImageBtn","getRandomDogImage","setLoading","setError","response","fetch","ok","Error","data","json","status","setImg","message","error","handleButtonClick","onClick","disabled","loading","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/react_exercises_for_beginners/src/App10/components/GenerateImageBtn.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction GenerateImageBtn() {\n    \n    const getRandomDogImage = async () => {\n\n        setLoading(true); // load before call\n        setError(null);\n    \n        try {\n          const response = await fetch('https://dog.ceo/api/breeds/image/random');\n          if (!response.ok) {\n            throw new Error('Failed to fetch data');\n          }\n          const data = await response.json();\n          if (data.status === \"success\") {\n            setImg(data.message);\n          } else {\n            setError('Failed to fetch image');\n          }\n        } catch (error) {\n          setError('Failed to fetch image');\n        } finally {\n          setLoading(false);\n        }\n      }\n    \n      const handleButtonClick = () => {\n        getRandomDogImage();\n      }\n    \n    return (\n        <button onClick={handleButtonClick} disabled={loading}>\n            {loading ? 'Loading...' : 'Get Random Dog Image'}\n        </button>\n    )\n}\n\nexport default GenerateImageBtn;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,gBAAgBA,CAAA,EAAG;EAExB,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAElCC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClBC,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,CAAC;MACvE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACzC;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,MAAM,KAAK,SAAS,EAAE;QAC7BC,MAAM,CAACH,IAAI,CAACI,OAAO,CAAC;MACtB,CAAC,MAAM;QACLT,QAAQ,CAAC,uBAAuB,CAAC;MACnC;IACF,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdV,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMY,iBAAiB,GAAGA,CAAA,KAAM;IAC9Bb,iBAAiB,CAAC,CAAC;EACrB,CAAC;EAEH,oBACIF,OAAA;IAAQgB,OAAO,EAAED,iBAAkB;IAACE,QAAQ,EAAEC,OAAQ;IAAAC,QAAA,EACjDD,OAAO,GAAG,YAAY,GAAG;EAAsB;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEjB;AAACC,EAAA,GAlCQvB,gBAAgB;AAoCzB,eAAeA,gBAAgB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}