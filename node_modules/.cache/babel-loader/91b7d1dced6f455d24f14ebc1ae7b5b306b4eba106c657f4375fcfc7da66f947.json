{"ast":null,"code":"var _jsxFileName = \"/Users/christaguba/repos/first-rasterizer/src/components/LineRasterizer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Canvas from \"./Canvas.tsx\";\nimport LineField from \"./LineField.tsx\";\nimport { Pixel } from \"./Pixel.tsx\";\nimport { Line } from \"./Line.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineRasterizer = () => {\n  _s();\n  const canvasSize = {\n    x: 640,\n    y: 480\n  };\n\n  // lines should draw a triangle\n  const [lineArr, setLineArr] = useState([new Line(new Pixel(0, 120), new Pixel(-160, -120)), new Line(new Pixel(-160, -120), new Pixel(160, -120)), new Line(new Pixel(160, -120), new Pixel(0, 120))]);\n  const handleChangeLine = (index, point, property, value) => {\n    // return new array to re-render\n    setLineArr(prevLineArr => {\n      const updatedLines = prevLineArr.map((line, i) => {\n        if (i === index) {\n          return line.updatePoint(point, property, value);\n        } else {\n          return line;\n        }\n      });\n      return updatedLines;\n    });\n  };\n  const handleAddLine = () => {\n    // initialize new pixel and line objects\n    const newLine = new Line(new Pixel(0, 0), new Pixel(0, 0));\n    // insert into existing array\n    setLineArr(prevLineArr => [...prevLineArr, newLine]);\n  };\n  for (let i = 0; i < lineArr.length; i++) {\n    console.log(`lineArr Line ${i}`);\n    console.log(`(x0: ${lineArr[i].p0.x}, y0: ${lineArr[i].p0.y}, color0: [${lineArr[i].p0.color}], h0: ${lineArr[i].p0.h})`);\n    console.log(`(x1: ${lineArr[i].p1.x}, y1: ${lineArr[i].p1.y}, color1: [${lineArr[i].p1.color}], h1: ${lineArr[i].p0.h})`);\n    console.log(\"\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"LineRasterizer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CanvasContainer\",\n      children: /*#__PURE__*/_jsxDEV(Canvas, {\n        lineArr: lineArr,\n        width: canvasSize.x,\n        height: canvasSize.y\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LineFieldContainer\",\n      children: [lineArr.map((item, index) => /*#__PURE__*/_jsxDEV(LineField, {\n        lineIndex: index,\n        line: item,\n        handleChangeLine: handleChangeLine\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"AddLineBtn\",\n        type: \"button\",\n        onClick: handleAddLine,\n        children: \"Add Line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(LineRasterizer, \"603zGzoAx9qPP2/TnVdH3ggbr0g=\");\n_c = LineRasterizer;\nexport default LineRasterizer;\nvar _c;\n$RefreshReg$(_c, \"LineRasterizer\");","map":{"version":3,"names":["React","useState","Canvas","LineField","Pixel","Line","jsxDEV","_jsxDEV","LineRasterizer","_s","canvasSize","x","y","lineArr","setLineArr","handleChangeLine","index","point","property","value","prevLineArr","updatedLines","map","line","i","updatePoint","handleAddLine","newLine","length","console","log","p0","color","h","p1","className","children","width","height","fileName","_jsxFileName","lineNumber","columnNumber","item","lineIndex","type","onClick","_c","$RefreshReg$"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/LineRasterizer.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport Canvas from \"./Canvas.tsx\";\nimport LineField from \"./LineField.tsx\";\nimport { Pixel } from \"./Pixel.tsx\";\nimport { Line } from \"./Line.tsx\";\nimport LineTest from './LineTest.tsx';\n\nconst LineRasterizer: React.FC = () => {\n\n    const canvasSize = { x: 640, y: 480 };\n\n    // lines should draw a triangle\n    const [lineArr, setLineArr] = useState<Line[]>([\n        new Line(\n            new Pixel(0, 120), \n            new Pixel(-160, -120)\n        ),\n        new Line(\n            new Pixel(-160, -120), \n            new Pixel(160, -120)\n        ),\n        new Line(\n            new Pixel(160, -120), \n            new Pixel(0, 120)\n        )\n    ]);\n\n    const handleChangeLine = (\n        index: number, \n        point: number, \n        property: 'x' | 'y' | 'h' | 'color', \n        value: string | number\n    ): void => {\n        // return new array to re-render\n        setLineArr((prevLineArr) => {\n            const updatedLines = prevLineArr.map((line, i) => {\n                if (i === index) {\n                    return line.updatePoint(point, property, value);\n                } else {\n                    return line;\n                }\n            });\n            return updatedLines;\n        });\n    };\n\n    const handleAddLine = (): void => {\n        // initialize new pixel and line objects\n        const newLine = new Line(new Pixel(0, 0), new Pixel(0, 0));\n        // insert into existing array\n        setLineArr((prevLineArr) => [...prevLineArr, newLine]);\n    }\n\n    for (let i = 0; i < lineArr.length; i ++) {\n        console.log(`lineArr Line ${i}`);\n        console.log(`(x0: ${lineArr[i].p0.x}, y0: ${lineArr[i].p0.y}, color0: [${lineArr[i].p0.color}], h0: ${lineArr[i].p0.h})`);\n        console.log(`(x1: ${lineArr[i].p1.x}, y1: ${lineArr[i].p1.y}, color1: [${lineArr[i].p1.color}], h1: ${lineArr[i].p0.h})`);\n        console.log(\"\");\n    }\n\n    return (\n        <div className=\"LineRasterizer\">\n            <div className=\"CanvasContainer\">\n                <Canvas\n                    lineArr={lineArr}\n                    width={canvasSize.x}\n                    height={canvasSize.y}\n                />\n            </div>\n            <div className=\"LineFieldContainer\">\n                {lineArr.map((item: Line, index: number) => (\n                    <LineField\n                        key={index}\n                        lineIndex={index}\n                        line={item}\n                        handleChangeLine={handleChangeLine}\n                    />\n                ))}\n                <button \n                    className=\"AddLineBtn\"\n                    type=\"button\" \n                    onClick={handleAddLine}\n                >\n                    Add Line\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default LineRasterizer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}