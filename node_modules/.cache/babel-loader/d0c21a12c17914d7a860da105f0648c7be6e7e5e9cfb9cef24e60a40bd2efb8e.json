{"ast":null,"code":"import { Pixel } from \"./Pixel.tsx\";\nexport class Line {\n  constructor(p0, p1) {\n    this._p0 = void 0;\n    this._p1 = void 0;\n    this._hexToRGB = hex => {\n      // Remove the hash if it's present\n      hex = hex.replace(/^#/, '');\n\n      // Ensure the hex code is valid\n      const validHex = /^[0-9A-F]{6}$/i.test(hex);\n      if (!validHex) {\n        console.error('Invalid hex color code');\n        return [0, 0, 0];\n      }\n\n      // Parse the hex code into RGB values\n      const bigint = parseInt(hex, 16);\n      const r = bigint >> 16 & 255;\n      const g = bigint >> 8 & 255;\n      const b = bigint & 255;\n      return [r, g, b];\n    };\n    this._p0 = p0;\n    this._p1 = p1;\n  }\n  get p0() {\n    return this._p0;\n  }\n  get p1() {\n    return this._p1;\n  }\n  set p0(newP0) {\n    this._p0 = newP0;\n  }\n  set p1(newP1) {\n    this._p1 = newP1;\n  }\n  updatePoint(point, property, value) {\n    let newP0 = new Pixel(this._p0.x, this._p0.y, this._p0.color, this._p0.h);\n    let newP1 = new Pixel(this._p1.x, this._p1.y, this._p1.color, this._p1.h);\n\n    // NOTE: Compile-time assertion (value as number) doesn't work,\n    //       so you need runtime conversion (Number(value))\n    if (property === 'x') {\n      if (point === 0) {\n        newP0 = new Pixel(Number(value), this._p0.y, this._p0.color, this._p0.h);\n      } else if (point === 1) {\n        newP1 = new Pixel(Number(value), this._p1.y, this._p1.color, this._p1.h);\n      }\n    } else if (property === 'y') {\n      if (point === 0) {\n        newP0 = new Pixel(this._p0.x, Number(value), this._p0.color, this._p0.h);\n      } else if (point === 1) {\n        newP1 = new Pixel(this._p1.x, Number(value), this._p1.color, this._p1.h);\n      }\n    } else if (property === 'color') {\n      let newColor = this._hexToRGB(value);\n      if (point === 0) {\n        newP0 = new Pixel(this._p0.x, this._p0.y, newColor, this._p0.h);\n      } else if (point === 1) {\n        newP1 = new Pixel(this._p1.x, this._p1.y, newColor, this._p1.h);\n      }\n    } else if (property === 'h') {\n      if (point === 0) {\n        newP0 = new Pixel(this._p0.x, this._p0.y, this._p0.color, Number(value));\n      } else if (point === 1) {\n        newP1 = new Pixel(this._p1.x, this._p1.y, this._p1.color, Number(value));\n      }\n    }\n\n    // // Update the private properties with the new values\n    // this._p0 = newP0;\n    // this._p1 = newP1;\n\n    return new Line(newP0, newP1);\n  }\n}","map":{"version":3,"names":["Pixel","Line","constructor","p0","p1","_p0","_p1","_hexToRGB","hex","replace","validHex","test","console","error","bigint","parseInt","r","g","b","newP0","newP1","updatePoint","point","property","value","x","y","color","h","Number","newColor"],"sources":["/Users/christaguba/repos/first-rasterizer/src/components/Line.tsx"],"sourcesContent":["import { Pixel } from \"./Pixel.tsx\";\n\nexport class Line {\n\n    private _p0: Pixel;\n    private _p1: Pixel;\n\n    constructor(p0: Pixel, p1: Pixel) {\n        this._p0 = p0;\n        this._p1 = p1;\n    }\n\n    get p0(): Pixel {\n        return this._p0;\n    }\n\n    get p1(): Pixel {\n        return this._p1;\n    }\n\n    set p0(newP0: Pixel) {\n        this._p0 = newP0;\n    }\n\n    set p1(newP1: Pixel) {\n        this._p1 = newP1;\n    }\n\n    private _hexToRGB = (hex: string): number[] =>  {\n        // Remove the hash if it's present\n        hex = hex.replace(/^#/, '');\n    \n        // Ensure the hex code is valid\n        const validHex = /^[0-9A-F]{6}$/i.test(hex);\n        if (!validHex) {\n            console.error('Invalid hex color code');\n            return [0, 0, 0];\n        }\n    \n        // Parse the hex code into RGB values\n        const bigint = parseInt(hex, 16);\n        const r = (bigint >> 16) & 255;\n        const g = (bigint >> 8) & 255;\n        const b = bigint & 255;\n    \n        return [r, g, b];\n    }\n\n    updatePoint(\n        point: number, \n        property: 'x' | 'y' | 'h' | 'color', \n        value: string | number\n    ): Line {\n        let newP0: Pixel = new Pixel(this._p0.x, this._p0.y, this._p0.color, this._p0.h);\n        let newP1: Pixel = new Pixel(this._p1.x, this._p1.y, this._p1.color, this._p1.h);\n\n        // NOTE: Compile-time assertion (value as number) doesn't work,\n        //       so you need runtime conversion (Number(value))\n        if (property === 'x') {\n            if (point === 0) {\n                newP0 = new Pixel(Number(value), this._p0.y, this._p0.color, this._p0.h);\n            } else if (point === 1) {\n                newP1 = new Pixel(Number(value), this._p1.y, this._p1.color,  this._p1.h);\n            }\n        } else if (property === 'y') {\n            if (point === 0) {\n                newP0 = new Pixel(this._p0.x, Number(value), this._p0.color, this._p0.h);\n            } else if (point === 1) {\n                newP1 = new Pixel(this._p1.x, Number(value), this._p1.color, this._p1.h);\n            }\n        } else if (property === 'color') {\n            let newColor: number[] = this._hexToRGB(value as string);\n            if (point === 0) {\n                newP0 = new Pixel(this._p0.x, this._p0.y, newColor, this._p0.h);\n            } else if (point === 1) {\n                newP1 = new Pixel(this._p1.x, this._p1.y, newColor, this._p1.h);\n            }\n        } else if (property === 'h') {\n            if (point === 0) {\n                newP0 = new Pixel(this._p0.x, this._p0.y, this._p0.color, Number(value));\n            } else if (point === 1) {\n                newP1 = new Pixel(this._p1.x, this._p1.y, this._p1.color, Number(value));\n            }\n        }\n\n        // // Update the private properties with the new values\n        // this._p0 = newP0;\n        // this._p1 = newP1;\n\n        return new Line(newP0, newP1);\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}